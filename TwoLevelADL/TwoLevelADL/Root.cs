//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Assembly;
using FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment;
using FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.SystemIndependent;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace FZI.SoftwareEngineering.DeepModeling.TwoLevelADL
{
    
    
    /// <summary>
    /// The default implementation of the Root class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/georghinkel/TwoLevelADL/1.0")]
    [XmlNamespacePrefixAttribute("ADL")]
    [ModelRepresentationClassAttribute("http://github.com/georghinkel/TwoLevelADL/1.0#//Root")]
    public partial class Root : ModelElement, IRoot, IModelElement
    {
        
        private static Lazy<ITypedElement> _systemReference = new Lazy<ITypedElement>(RetrieveSystemReference);
        
        /// <summary>
        /// The backing field for the System property
        /// </summary>
        private ISystem0 _system;
        
        private static Lazy<ITypedElement> _repositoryReference = new Lazy<ITypedElement>(RetrieveRepositoryReference);
        
        /// <summary>
        /// The backing field for the Repository property
        /// </summary>
        private IRepository _repository;
        
        private static Lazy<ITypedElement> _allocationReference = new Lazy<ITypedElement>(RetrieveAllocationReference);
        
        /// <summary>
        /// The backing field for the Allocation property
        /// </summary>
        private IAllocation _allocation;
        
        private static Lazy<ITypedElement> _environmentReference = new Lazy<ITypedElement>(RetrieveEnvironmentReference);
        
        /// <summary>
        /// The backing field for the Environment property
        /// </summary>
        private IEnvironment _environment;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The System property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public ISystem0 System
        {
            get
            {
                return this._system;
            }
            set
            {
                if ((this._system != value))
                {
                    ISystem0 old = this._system;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSystemChanging(e);
                    this.OnPropertyChanging("System", e, _systemReference);
                    this._system = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetSystem;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetSystem;
                    }
                    this.OnSystemChanged(e);
                    this.OnPropertyChanged("System", e, _systemReference);
                }
            }
        }
        
        /// <summary>
        /// The Repository property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IRepository Repository
        {
            get
            {
                return this._repository;
            }
            set
            {
                if ((this._repository != value))
                {
                    IRepository old = this._repository;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRepositoryChanging(e);
                    this.OnPropertyChanging("Repository", e, _repositoryReference);
                    this._repository = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetRepository;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetRepository;
                    }
                    this.OnRepositoryChanged(e);
                    this.OnPropertyChanged("Repository", e, _repositoryReference);
                }
            }
        }
        
        /// <summary>
        /// The Allocation property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IAllocation Allocation
        {
            get
            {
                return this._allocation;
            }
            set
            {
                if ((this._allocation != value))
                {
                    IAllocation old = this._allocation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAllocationChanging(e);
                    this.OnPropertyChanging("Allocation", e, _allocationReference);
                    this._allocation = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetAllocation;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetAllocation;
                    }
                    this.OnAllocationChanged(e);
                    this.OnPropertyChanged("Allocation", e, _allocationReference);
                }
            }
        }
        
        /// <summary>
        /// The Environment property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IEnvironment Environment
        {
            get
            {
                return this._environment;
            }
            set
            {
                if ((this._environment != value))
                {
                    IEnvironment old = this._environment;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnvironmentChanging(e);
                    this.OnPropertyChanging("Environment", e, _environmentReference);
                    this._environment = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetEnvironment;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetEnvironment;
                    }
                    this.OnEnvironmentChanged(e);
                    this.OnPropertyChanged("Environment", e, _environmentReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new RootChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RootReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/TwoLevelADL/1.0#//Root")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the System property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SystemChanging;
        
        /// <summary>
        /// Gets fired when the System property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SystemChanged;
        
        /// <summary>
        /// Gets fired before the Repository property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RepositoryChanging;
        
        /// <summary>
        /// Gets fired when the Repository property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RepositoryChanged;
        
        /// <summary>
        /// Gets fired before the Allocation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AllocationChanging;
        
        /// <summary>
        /// Gets fired when the Allocation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AllocationChanged;
        
        /// <summary>
        /// Gets fired before the Environment property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnvironmentChanging;
        
        /// <summary>
        /// Gets fired when the Environment property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnvironmentChanged;
        
        private static ITypedElement RetrieveSystemReference()
        {
            return ((ITypedElement)(((ModelElement)(FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Root.ClassInstance)).Resolve("System")));
        }
        
        /// <summary>
        /// Raises the SystemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSystemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SystemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SystemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSystemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SystemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the System property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSystem(object sender, System.EventArgs eventArgs)
        {
            this.System = null;
        }
        
        private static ITypedElement RetrieveRepositoryReference()
        {
            return ((ITypedElement)(((ModelElement)(FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Root.ClassInstance)).Resolve("Repository")));
        }
        
        /// <summary>
        /// Raises the RepositoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRepositoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RepositoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RepositoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRepositoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RepositoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Repository property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRepository(object sender, System.EventArgs eventArgs)
        {
            this.Repository = null;
        }
        
        private static ITypedElement RetrieveAllocationReference()
        {
            return ((ITypedElement)(((ModelElement)(FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Root.ClassInstance)).Resolve("Allocation")));
        }
        
        /// <summary>
        /// Raises the AllocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAllocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AllocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AllocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAllocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AllocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Allocation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAllocation(object sender, System.EventArgs eventArgs)
        {
            this.Allocation = null;
        }
        
        private static ITypedElement RetrieveEnvironmentReference()
        {
            return ((ITypedElement)(((ModelElement)(FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Root.ClassInstance)).Resolve("Environment")));
        }
        
        /// <summary>
        /// Raises the EnvironmentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnvironmentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnvironmentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnvironmentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnvironmentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnvironmentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Environment property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEnvironment(object sender, System.EventArgs eventArgs)
        {
            this.Environment = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.System))
            {
                return ModelHelper.CreatePath("System");
            }
            if ((element == this.Repository))
            {
                return ModelHelper.CreatePath("Repository");
            }
            if ((element == this.Allocation))
            {
                return ModelHelper.CreatePath("Allocation");
            }
            if ((element == this.Environment))
            {
                return ModelHelper.CreatePath("Environment");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SYSTEM"))
            {
                return this.System;
            }
            if ((reference == "REPOSITORY"))
            {
                return this.Repository;
            }
            if ((reference == "ALLOCATION"))
            {
                return this.Allocation;
            }
            if ((reference == "ENVIRONMENT"))
            {
                return this.Environment;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SYSTEM"))
            {
                this.System = ((ISystem0)(value));
                return;
            }
            if ((feature == "REPOSITORY"))
            {
                this.Repository = ((IRepository)(value));
                return;
            }
            if ((feature == "ALLOCATION"))
            {
                this.Allocation = ((IAllocation)(value));
                return;
            }
            if ((feature == "ENVIRONMENT"))
            {
                this.Environment = ((IEnvironment)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "System"))
            {
                return new SystemProxy(this);
            }
            if ((attribute == "Repository"))
            {
                return new RepositoryProxy(this);
            }
            if ((attribute == "Allocation"))
            {
                return new AllocationProxy(this);
            }
            if ((attribute == "Environment"))
            {
                return new EnvironmentProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "System"))
            {
                return new SystemProxy(this);
            }
            if ((reference == "Repository"))
            {
                return new RepositoryProxy(this);
            }
            if ((reference == "Allocation"))
            {
                return new AllocationProxy(this);
            }
            if ((reference == "Environment"))
            {
                return new EnvironmentProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/TwoLevelADL/1.0#//Root")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Root class
        /// </summary>
        public class RootChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Root _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RootChildrenCollection(Root parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.System != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Repository != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Allocation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Environment != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SystemChanged += this.PropagateValueChanges;
                this._parent.RepositoryChanged += this.PropagateValueChanges;
                this._parent.AllocationChanged += this.PropagateValueChanges;
                this._parent.EnvironmentChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SystemChanged -= this.PropagateValueChanges;
                this._parent.RepositoryChanged -= this.PropagateValueChanges;
                this._parent.AllocationChanged -= this.PropagateValueChanges;
                this._parent.EnvironmentChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.System == null))
                {
                    ISystem0 systemCasted = item.As<ISystem0>();
                    if ((systemCasted != null))
                    {
                        this._parent.System = systemCasted;
                        return;
                    }
                }
                if ((this._parent.Repository == null))
                {
                    IRepository repositoryCasted = item.As<IRepository>();
                    if ((repositoryCasted != null))
                    {
                        this._parent.Repository = repositoryCasted;
                        return;
                    }
                }
                if ((this._parent.Allocation == null))
                {
                    IAllocation allocationCasted = item.As<IAllocation>();
                    if ((allocationCasted != null))
                    {
                        this._parent.Allocation = allocationCasted;
                        return;
                    }
                }
                if ((this._parent.Environment == null))
                {
                    IEnvironment environmentCasted = item.As<IEnvironment>();
                    if ((environmentCasted != null))
                    {
                        this._parent.Environment = environmentCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.System = null;
                this._parent.Repository = null;
                this._parent.Allocation = null;
                this._parent.Environment = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.System))
                {
                    return true;
                }
                if ((item == this._parent.Repository))
                {
                    return true;
                }
                if ((item == this._parent.Allocation))
                {
                    return true;
                }
                if ((item == this._parent.Environment))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.System != null))
                {
                    array[arrayIndex] = this._parent.System;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Repository != null))
                {
                    array[arrayIndex] = this._parent.Repository;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Allocation != null))
                {
                    array[arrayIndex] = this._parent.Allocation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Environment != null))
                {
                    array[arrayIndex] = this._parent.Environment;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.System == item))
                {
                    this._parent.System = null;
                    return true;
                }
                if ((this._parent.Repository == item))
                {
                    this._parent.Repository = null;
                    return true;
                }
                if ((this._parent.Allocation == item))
                {
                    this._parent.Allocation = null;
                    return true;
                }
                if ((this._parent.Environment == item))
                {
                    this._parent.Environment = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.System).Concat(this._parent.Repository).Concat(this._parent.Allocation).Concat(this._parent.Environment).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Root class
        /// </summary>
        public class RootReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Root _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RootReferencedElementsCollection(Root parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.System != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Repository != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Allocation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Environment != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SystemChanged += this.PropagateValueChanges;
                this._parent.RepositoryChanged += this.PropagateValueChanges;
                this._parent.AllocationChanged += this.PropagateValueChanges;
                this._parent.EnvironmentChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SystemChanged -= this.PropagateValueChanges;
                this._parent.RepositoryChanged -= this.PropagateValueChanges;
                this._parent.AllocationChanged -= this.PropagateValueChanges;
                this._parent.EnvironmentChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.System == null))
                {
                    ISystem0 systemCasted = item.As<ISystem0>();
                    if ((systemCasted != null))
                    {
                        this._parent.System = systemCasted;
                        return;
                    }
                }
                if ((this._parent.Repository == null))
                {
                    IRepository repositoryCasted = item.As<IRepository>();
                    if ((repositoryCasted != null))
                    {
                        this._parent.Repository = repositoryCasted;
                        return;
                    }
                }
                if ((this._parent.Allocation == null))
                {
                    IAllocation allocationCasted = item.As<IAllocation>();
                    if ((allocationCasted != null))
                    {
                        this._parent.Allocation = allocationCasted;
                        return;
                    }
                }
                if ((this._parent.Environment == null))
                {
                    IEnvironment environmentCasted = item.As<IEnvironment>();
                    if ((environmentCasted != null))
                    {
                        this._parent.Environment = environmentCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.System = null;
                this._parent.Repository = null;
                this._parent.Allocation = null;
                this._parent.Environment = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.System))
                {
                    return true;
                }
                if ((item == this._parent.Repository))
                {
                    return true;
                }
                if ((item == this._parent.Allocation))
                {
                    return true;
                }
                if ((item == this._parent.Environment))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.System != null))
                {
                    array[arrayIndex] = this._parent.System;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Repository != null))
                {
                    array[arrayIndex] = this._parent.Repository;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Allocation != null))
                {
                    array[arrayIndex] = this._parent.Allocation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Environment != null))
                {
                    array[arrayIndex] = this._parent.Environment;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.System == item))
                {
                    this._parent.System = null;
                    return true;
                }
                if ((this._parent.Repository == item))
                {
                    this._parent.Repository = null;
                    return true;
                }
                if ((this._parent.Allocation == item))
                {
                    this._parent.Allocation = null;
                    return true;
                }
                if ((this._parent.Environment == item))
                {
                    this._parent.Environment = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.System).Concat(this._parent.Repository).Concat(this._parent.Allocation).Concat(this._parent.Environment).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the System property
        /// </summary>
        private sealed class SystemProxy : ModelPropertyChange<IRoot, ISystem0>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SystemProxy(IRoot modelElement) : 
                    base(modelElement, "System")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISystem0 Value
            {
                get
                {
                    return this.ModelElement.System;
                }
                set
                {
                    this.ModelElement.System = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Repository property
        /// </summary>
        private sealed class RepositoryProxy : ModelPropertyChange<IRoot, IRepository>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RepositoryProxy(IRoot modelElement) : 
                    base(modelElement, "Repository")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRepository Value
            {
                get
                {
                    return this.ModelElement.Repository;
                }
                set
                {
                    this.ModelElement.Repository = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Allocation property
        /// </summary>
        private sealed class AllocationProxy : ModelPropertyChange<IRoot, IAllocation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AllocationProxy(IRoot modelElement) : 
                    base(modelElement, "Allocation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAllocation Value
            {
                get
                {
                    return this.ModelElement.Allocation;
                }
                set
                {
                    this.ModelElement.Allocation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Environment property
        /// </summary>
        private sealed class EnvironmentProxy : ModelPropertyChange<IRoot, IEnvironment>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnvironmentProxy(IRoot modelElement) : 
                    base(modelElement, "Environment")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEnvironment Value
            {
                get
                {
                    return this.ModelElement.Environment;
                }
                set
                {
                    this.ModelElement.Environment = value;
                }
            }
        }
    }
}

