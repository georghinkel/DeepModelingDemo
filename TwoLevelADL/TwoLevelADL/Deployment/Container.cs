//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using FZI.SoftwareEngineering.DeepModeling.TwoLevelADL;
using FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Assembly;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment
{
    
    
    /// <summary>
    /// The default implementation of the Container class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/georghinkel/TwoLevelADL/1.0/Deployment/")]
    [XmlNamespacePrefixAttribute("deploy")]
    [ModelRepresentationClassAttribute("http://github.com/georghinkel/TwoLevelADL/1.0#//Deployment/Container")]
    [DebuggerDisplayAttribute("Container {Name}")]
    public partial class Container : NamedElement, FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment.IContainer, IModelElement
    {
        
        private static Lazy<ITypedElement> _linksReference = new Lazy<ITypedElement>(RetrieveLinksReference);
        
        /// <summary>
        /// The backing field for the Links property
        /// </summary>
        private ContainerLinksCollection _links;
        
        private static Lazy<ITypedElement> _environmentReference = new Lazy<ITypedElement>(RetrieveEnvironmentReference);
        
        private static IClass _classInstance;
        
        public Container()
        {
            this._links = new ContainerLinksCollection(this);
            this._links.CollectionChanging += this.LinksCollectionChanging;
            this._links.CollectionChanged += this.LinksCollectionChanged;
        }
        
        /// <summary>
        /// The Links property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConnectedContainers")]
        [ConstantAttribute()]
        public IOrderedSetExpression<ILink> Links
        {
            get
            {
                return this._links;
            }
        }
        
        /// <summary>
        /// The Environment property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Containers")]
        public IEnvironment Environment
        {
            get
            {
                return ModelHelper.CastAs<IEnvironment>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ContainerReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/TwoLevelADL/1.0#//Deployment/Container")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Environment property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnvironmentChanging;
        
        /// <summary>
        /// Gets fired when the Environment property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnvironmentChanged;
        
        private static ITypedElement RetrieveLinksReference()
        {
            return ((ITypedElement)(((ModelElement)(FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment.Container.ClassInstance)).Resolve("Links")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Links property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LinksCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Links", e, _linksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Links property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LinksCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Links", e, _linksReference);
        }
        
        private static ITypedElement RetrieveEnvironmentReference()
        {
            return ((ITypedElement)(((ModelElement)(FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment.Container.ClassInstance)).Resolve("Environment")));
        }
        
        /// <summary>
        /// Raises the EnvironmentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnvironmentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnvironmentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IEnvironment oldEnvironment = ModelHelper.CastAs<IEnvironment>(oldParent);
            IEnvironment newEnvironment = ModelHelper.CastAs<IEnvironment>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldEnvironment, newEnvironment);
            this.OnEnvironmentChanging(e);
            this.OnPropertyChanging("Environment", e, _environmentReference);
        }
        
        /// <summary>
        /// Raises the EnvironmentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnvironmentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnvironmentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IEnvironment oldEnvironment = ModelHelper.CastAs<IEnvironment>(oldParent);
            IEnvironment newEnvironment = ModelHelper.CastAs<IEnvironment>(newParent);
            if ((oldEnvironment != null))
            {
                oldEnvironment.Containers.Remove(this);
            }
            if ((newEnvironment != null))
            {
                newEnvironment.Containers.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldEnvironment, newEnvironment);
            this.OnEnvironmentChanged(e);
            this.OnPropertyChanged("Environment", e, _environmentReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "LINKS"))
            {
                return this._links;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ENVIRONMENT"))
            {
                this.Environment = ((IEnvironment)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Environment"))
            {
                return new EnvironmentProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Environment"))
            {
                return new EnvironmentProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/TwoLevelADL/1.0#//Deployment/Container")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Container class
        /// </summary>
        public class ContainerReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Container _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ContainerReferencedElementsCollection(Container parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Links.Count);
                    if ((this._parent.Environment != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Links.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EnvironmentChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Links.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EnvironmentChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ILink linksCasted = item.As<ILink>();
                if ((linksCasted != null))
                {
                    this._parent.Links.Add(linksCasted);
                }
                if ((this._parent.Environment == null))
                {
                    IEnvironment environmentCasted = item.As<IEnvironment>();
                    if ((environmentCasted != null))
                    {
                        this._parent.Environment = environmentCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Links.Clear();
                this._parent.Environment = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Links.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Environment))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> linksEnumerator = this._parent.Links.GetEnumerator();
                try
                {
                    for (
                    ; linksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = linksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    linksEnumerator.Dispose();
                }
                if ((this._parent.Environment != null))
                {
                    array[arrayIndex] = this._parent.Environment;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ILink linkItem = item.As<ILink>();
                if (((linkItem != null) 
                            && this._parent.Links.Remove(linkItem)))
                {
                    return true;
                }
                if ((this._parent.Environment == item))
                {
                    this._parent.Environment = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Links).Concat(this._parent.Environment).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Environment property
        /// </summary>
        private sealed class EnvironmentProxy : ModelPropertyChange<FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment.IContainer, IEnvironment>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnvironmentProxy(FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment.IContainer modelElement) : 
                    base(modelElement, "Environment")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEnvironment Value
            {
                get
                {
                    return this.ModelElement.Environment;
                }
                set
                {
                    this.ModelElement.Environment = value;
                }
            }
        }
    }
}

