//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using FZI.SoftwareEngineering.DeepModeling.TwoLevelADL;
using FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Assembly;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment
{
    
    
    /// <summary>
    /// The default implementation of the AllocationContext class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/georghinkel/TwoLevelADL/1.0/Deployment/")]
    [XmlNamespacePrefixAttribute("deploy")]
    [ModelRepresentationClassAttribute("http://github.com/georghinkel/TwoLevelADL/1.0#//Deployment/AllocationContext")]
    public partial class AllocationContext : ModelElement, IAllocationContext, IModelElement
    {
        
        private static Lazy<ITypedElement> _assemblyReference = new Lazy<ITypedElement>(RetrieveAssemblyReference);
        
        /// <summary>
        /// The backing field for the Assembly property
        /// </summary>
        private IAssemblyContext _assembly;
        
        private static Lazy<ITypedElement> _containerReference = new Lazy<ITypedElement>(RetrieveContainerReference);
        
        /// <summary>
        /// The backing field for the Container property
        /// </summary>
        private FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment.IContainer _container;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Assembly property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public IAssemblyContext Assembly
        {
            get
            {
                return this._assembly;
            }
            set
            {
                if ((this._assembly != value))
                {
                    IAssemblyContext old = this._assembly;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssemblyChanging(e);
                    this.OnPropertyChanging("Assembly", e, _assemblyReference);
                    this._assembly = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAssembly;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAssembly;
                    }
                    this.OnAssemblyChanged(e);
                    this.OnPropertyChanged("Assembly", e, _assemblyReference);
                }
            }
        }
        
        /// <summary>
        /// The Container property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment.IContainer Container
        {
            get
            {
                return this._container;
            }
            set
            {
                if ((this._container != value))
                {
                    FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment.IContainer old = this._container;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnContainerChanging(e);
                    this.OnPropertyChanging("Container", e, _containerReference);
                    this._container = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetContainer;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetContainer;
                    }
                    this.OnContainerChanged(e);
                    this.OnPropertyChanged("Container", e, _containerReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AllocationContextReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/TwoLevelADL/1.0#//Deployment/AllocationContext")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Assembly property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssemblyChanging;
        
        /// <summary>
        /// Gets fired when the Assembly property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssemblyChanged;
        
        /// <summary>
        /// Gets fired before the Container property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ContainerChanging;
        
        /// <summary>
        /// Gets fired when the Container property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ContainerChanged;
        
        private static ITypedElement RetrieveAssemblyReference()
        {
            return ((ITypedElement)(((ModelElement)(FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment.AllocationContext.ClassInstance)).Resolve("Assembly")));
        }
        
        /// <summary>
        /// Raises the AssemblyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssemblyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssemblyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssemblyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssemblyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssemblyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Assembly property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssembly(object sender, System.EventArgs eventArgs)
        {
            this.Assembly = null;
        }
        
        private static ITypedElement RetrieveContainerReference()
        {
            return ((ITypedElement)(((ModelElement)(FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment.AllocationContext.ClassInstance)).Resolve("Container")));
        }
        
        /// <summary>
        /// Raises the ContainerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContainerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ContainerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ContainerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContainerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ContainerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Container property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetContainer(object sender, System.EventArgs eventArgs)
        {
            this.Container = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ASSEMBLY"))
            {
                this.Assembly = ((IAssemblyContext)(value));
                return;
            }
            if ((feature == "CONTAINER"))
            {
                this.Container = ((FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment.IContainer)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Assembly"))
            {
                return new AssemblyProxy(this);
            }
            if ((attribute == "Container"))
            {
                return new ContainerProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Assembly"))
            {
                return new AssemblyProxy(this);
            }
            if ((reference == "Container"))
            {
                return new ContainerProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/TwoLevelADL/1.0#//Deployment/AllocationContext")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AllocationContext class
        /// </summary>
        public class AllocationContextReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AllocationContext _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AllocationContextReferencedElementsCollection(AllocationContext parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Assembly != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Container != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AssemblyChanged += this.PropagateValueChanges;
                this._parent.ContainerChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AssemblyChanged -= this.PropagateValueChanges;
                this._parent.ContainerChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Assembly == null))
                {
                    IAssemblyContext assemblyCasted = item.As<IAssemblyContext>();
                    if ((assemblyCasted != null))
                    {
                        this._parent.Assembly = assemblyCasted;
                        return;
                    }
                }
                if ((this._parent.Container == null))
                {
                    FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment.IContainer containerCasted = item.As<FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment.IContainer>();
                    if ((containerCasted != null))
                    {
                        this._parent.Container = containerCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Assembly = null;
                this._parent.Container = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Assembly))
                {
                    return true;
                }
                if ((item == this._parent.Container))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Assembly != null))
                {
                    array[arrayIndex] = this._parent.Assembly;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Container != null))
                {
                    array[arrayIndex] = this._parent.Container;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Assembly == item))
                {
                    this._parent.Assembly = null;
                    return true;
                }
                if ((this._parent.Container == item))
                {
                    this._parent.Container = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Assembly).Concat(this._parent.Container).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Assembly property
        /// </summary>
        private sealed class AssemblyProxy : ModelPropertyChange<IAllocationContext, IAssemblyContext>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssemblyProxy(IAllocationContext modelElement) : 
                    base(modelElement, "Assembly")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssemblyContext Value
            {
                get
                {
                    return this.ModelElement.Assembly;
                }
                set
                {
                    this.ModelElement.Assembly = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Container property
        /// </summary>
        private sealed class ContainerProxy : ModelPropertyChange<IAllocationContext, FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment.IContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ContainerProxy(IAllocationContext modelElement) : 
                    base(modelElement, "Container")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Deployment.IContainer Value
            {
                get
                {
                    return this.ModelElement.Container;
                }
                set
                {
                    this.ModelElement.Container = value;
                }
            }
        }
    }
}

