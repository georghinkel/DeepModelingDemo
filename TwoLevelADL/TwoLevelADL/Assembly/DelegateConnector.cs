//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using FZI.SoftwareEngineering.DeepModeling.TwoLevelADL;
using FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.SystemIndependent;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Assembly
{
    
    
    /// <summary>
    /// The default implementation of the DelegateConnector class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/georghinkel/TwoLevelADL/1.0/Assembly/")]
    [XmlNamespacePrefixAttribute("assembly")]
    [ModelRepresentationClassAttribute("http://github.com/georghinkel/TwoLevelADL/1.0#//Assembly/DelegateConnector")]
    public abstract partial class DelegateConnector : ModelElement, IDelegateConnector, IModelElement
    {
        
        private static Lazy<ITypedElement> _interfaceReference = new Lazy<ITypedElement>(RetrieveInterfaceReference);
        
        /// <summary>
        /// The backing field for the Interface property
        /// </summary>
        private IInterface _interface;
        
        private static Lazy<ITypedElement> _connectedAssemblyContextReference = new Lazy<ITypedElement>(RetrieveConnectedAssemblyContextReference);
        
        /// <summary>
        /// The backing field for the ConnectedAssemblyContext property
        /// </summary>
        private IAssemblyContext _connectedAssemblyContext;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Interface property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public IInterface Interface
        {
            get
            {
                return this._interface;
            }
            set
            {
                if ((this._interface != value))
                {
                    IInterface old = this._interface;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInterfaceChanging(e);
                    this.OnPropertyChanging("Interface", e, _interfaceReference);
                    this._interface = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetInterface;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetInterface;
                    }
                    this.OnInterfaceChanged(e);
                    this.OnPropertyChanged("Interface", e, _interfaceReference);
                }
            }
        }
        
        /// <summary>
        /// The ConnectedAssemblyContext property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public IAssemblyContext ConnectedAssemblyContext
        {
            get
            {
                return this._connectedAssemblyContext;
            }
            set
            {
                if ((this._connectedAssemblyContext != value))
                {
                    IAssemblyContext old = this._connectedAssemblyContext;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConnectedAssemblyContextChanging(e);
                    this.OnPropertyChanging("ConnectedAssemblyContext", e, _connectedAssemblyContextReference);
                    this._connectedAssemblyContext = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetConnectedAssemblyContext;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetConnectedAssemblyContext;
                    }
                    this.OnConnectedAssemblyContextChanged(e);
                    this.OnPropertyChanged("ConnectedAssemblyContext", e, _connectedAssemblyContextReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DelegateConnectorReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/TwoLevelADL/1.0#//Assembly/DelegateConnector")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Interface property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InterfaceChanging;
        
        /// <summary>
        /// Gets fired when the Interface property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InterfaceChanged;
        
        /// <summary>
        /// Gets fired before the ConnectedAssemblyContext property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectedAssemblyContextChanging;
        
        /// <summary>
        /// Gets fired when the ConnectedAssemblyContext property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectedAssemblyContextChanged;
        
        private static ITypedElement RetrieveInterfaceReference()
        {
            return ((ITypedElement)(((ModelElement)(FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Assembly.DelegateConnector.ClassInstance)).Resolve("Interface")));
        }
        
        /// <summary>
        /// Raises the InterfaceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInterfaceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InterfaceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InterfaceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInterfaceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InterfaceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Interface property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInterface(object sender, System.EventArgs eventArgs)
        {
            this.Interface = null;
        }
        
        private static ITypedElement RetrieveConnectedAssemblyContextReference()
        {
            return ((ITypedElement)(((ModelElement)(FZI.SoftwareEngineering.DeepModeling.TwoLevelADL.Assembly.DelegateConnector.ClassInstance)).Resolve("ConnectedAssemblyContext")));
        }
        
        /// <summary>
        /// Raises the ConnectedAssemblyContextChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectedAssemblyContextChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectedAssemblyContextChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConnectedAssemblyContextChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectedAssemblyContextChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectedAssemblyContextChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ConnectedAssemblyContext property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetConnectedAssemblyContext(object sender, System.EventArgs eventArgs)
        {
            this.ConnectedAssemblyContext = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "INTERFACE"))
            {
                this.Interface = ((IInterface)(value));
                return;
            }
            if ((feature == "CONNECTEDASSEMBLYCONTEXT"))
            {
                this.ConnectedAssemblyContext = ((IAssemblyContext)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Interface"))
            {
                return new InterfaceProxy(this);
            }
            if ((attribute == "ConnectedAssemblyContext"))
            {
                return new ConnectedAssemblyContextProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Interface"))
            {
                return new InterfaceProxy(this);
            }
            if ((reference == "ConnectedAssemblyContext"))
            {
                return new ConnectedAssemblyContextProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/TwoLevelADL/1.0#//Assembly/DelegateConnector")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the DelegateConnector class
        /// </summary>
        public class DelegateConnectorReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private DelegateConnector _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DelegateConnectorReferencedElementsCollection(DelegateConnector parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Interface != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ConnectedAssemblyContext != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.InterfaceChanged += this.PropagateValueChanges;
                this._parent.ConnectedAssemblyContextChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.InterfaceChanged -= this.PropagateValueChanges;
                this._parent.ConnectedAssemblyContextChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Interface == null))
                {
                    IInterface interfaceCasted = item.As<IInterface>();
                    if ((interfaceCasted != null))
                    {
                        this._parent.Interface = interfaceCasted;
                        return;
                    }
                }
                if ((this._parent.ConnectedAssemblyContext == null))
                {
                    IAssemblyContext connectedAssemblyContextCasted = item.As<IAssemblyContext>();
                    if ((connectedAssemblyContextCasted != null))
                    {
                        this._parent.ConnectedAssemblyContext = connectedAssemblyContextCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Interface = null;
                this._parent.ConnectedAssemblyContext = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Interface))
                {
                    return true;
                }
                if ((item == this._parent.ConnectedAssemblyContext))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Interface != null))
                {
                    array[arrayIndex] = this._parent.Interface;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ConnectedAssemblyContext != null))
                {
                    array[arrayIndex] = this._parent.ConnectedAssemblyContext;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Interface == item))
                {
                    this._parent.Interface = null;
                    return true;
                }
                if ((this._parent.ConnectedAssemblyContext == item))
                {
                    this._parent.ConnectedAssemblyContext = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Interface).Concat(this._parent.ConnectedAssemblyContext).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Interface property
        /// </summary>
        private sealed class InterfaceProxy : ModelPropertyChange<IDelegateConnector, IInterface>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InterfaceProxy(IDelegateConnector modelElement) : 
                    base(modelElement, "Interface")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInterface Value
            {
                get
                {
                    return this.ModelElement.Interface;
                }
                set
                {
                    this.ModelElement.Interface = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ConnectedAssemblyContext property
        /// </summary>
        private sealed class ConnectedAssemblyContextProxy : ModelPropertyChange<IDelegateConnector, IAssemblyContext>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConnectedAssemblyContextProxy(IDelegateConnector modelElement) : 
                    base(modelElement, "ConnectedAssemblyContext")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssemblyContext Value
            {
                get
                {
                    return this.ModelElement.ConnectedAssemblyContext;
                }
                set
                {
                    this.ModelElement.ConnectedAssemblyContext = value;
                }
            }
        }
    }
}

