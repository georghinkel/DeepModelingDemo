//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using FZI.SoftwareEngineering.DeepModeling.DeepADL;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace FZI.SoftwareEngineering.DeepModeling.Repository
{
    
    
    /// <summary>
    /// The default implementation of the AudioStore class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/georghinkel/mediaStore/Repository")]
    [XmlNamespacePrefixAttribute("repo")]
    [ModelRepresentationClassAttribute("http://github.com/georghinkel/mediaStore/Repository#//AudioStore")]
    [DebuggerDisplayAttribute("AudioStore {Name}")]
    public partial class AudioStore : NMF.Models.Meta.MetaElement, IAudioStore, NMF.Models.IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _audioDBReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveAudioDBReference);
        
        /// <summary>
        /// The backing field for the AudioDB property
        /// </summary>
        private IAudioDBInterface _audioDB;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _userManagementReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveUserManagementReference);
        
        /// <summary>
        /// The backing field for the UserManagement property
        /// </summary>
        private IUserManagementInterface _userManagement;
        
        private static Lazy<NMF.Models.Meta.IReferenceType> _ReferenceType = new Lazy<NMF.Models.Meta.IReferenceType>(RetrieveReferenceType);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _declaringTypeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDeclaringTypeReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        event EventHandler<ValueChangedEventArgs> IReference.OppositeChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.OppositeChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.AnchorChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.AnchorChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.RefinesChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.RefinesChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.ReferenceTypeChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.ReferenceTypeChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.TypeChanged
        {
            add
            {
                IReference _this_IReference = this;
                _this_IReference.ReferenceTypeChanged += value;
            }
            remove
            {
                IReference _this_IReference = this;
                _this_IReference.ReferenceTypeChanged -= value;
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.TypeChanging
        {
            add
            {
                IReference _this_IReference = this;
                _this_IReference.ReferenceTypeChanging += value;
            }
            remove
            {
                IReference _this_IReference = this;
                _this_IReference.ReferenceTypeChanging -= value;
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.LowerBoundChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.LowerBoundChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.UpperBoundChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.UpperBoundChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.IsContainmentChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.IsContainmentChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.IsOrderedChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.IsOrderedChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.IsUniqueChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.IsUniqueChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        
        /// <summary>
        /// The audioDB property
        /// </summary>
        [XmlElementNameAttribute("audioDB")]
        [XmlAttributeAttribute(true)]
        public IAudioDBInterface AudioDB
        {
            get
            {
                return this._audioDB;
            }
            set
            {
                if ((this._audioDB != value))
                {
                    IAudioDBInterface old = this._audioDB;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAudioDBChanging(e);
                    this.OnPropertyChanging("AudioDB", e, _audioDBReference);
                    this._audioDB = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAudioDB;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAudioDB;
                    }
                    this.OnAudioDBChanged(e);
                    this.OnPropertyChanged("AudioDB", e, _audioDBReference);
                }
            }
        }
        
        /// <summary>
        /// The userManagement property
        /// </summary>
        [XmlElementNameAttribute("userManagement")]
        [XmlAttributeAttribute(true)]
        public IUserManagementInterface UserManagement
        {
            get
            {
                return this._userManagement;
            }
            set
            {
                if ((this._userManagement != value))
                {
                    IUserManagementInterface old = this._userManagement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUserManagementChanging(e);
                    this.OnPropertyChanging("UserManagement", e, _userManagementReference);
                    this._userManagement = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetUserManagement;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetUserManagement;
                    }
                    this.OnUserManagementChanged(e);
                    this.OnPropertyChanged("UserManagement", e, _userManagementReference);
                }
            }
        }
        
        NMF.Models.Meta.IReference IReference.Opposite
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        NMF.Models.Meta.IClass IReference.Anchor
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        NMF.Models.Meta.IReference IReference.Refines
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        NMF.Models.Meta.IReferenceType IReference.ReferenceType
        {
            get
            {
                return _ReferenceType.Value;
            }
            set
            {
                if ((value != _ReferenceType.Value))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        NMF.Models.Meta.IType ITypedElement.Type
        {
            get
            {
                IAudioStore _this = this;
                if ((_this.ReferenceType != null))
                {
                    return _this.ReferenceType;
                }
                return null;
            }
            set
            {
                IAudioStore _this = this;
                if ((value != null))
                {
                    IReferenceType @__ReferenceType = value.As<IReferenceType>();
                    if ((@__ReferenceType != null))
                    {
                        _this.ReferenceType = @__ReferenceType;
                        return;
                    }
                }
                else
                {
                    _this.ReferenceType = null;
                    return;
                }
                throw new System.ArgumentException("There was no suitable refining reference found for this object");
            }
        }
        
        int ITypedElement.LowerBound
        {
            get
            {
                return 1;
            }
            set
            {
                if ((value != 1))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        int ITypedElement.UpperBound
        {
            get
            {
                return 1;
            }
            set
            {
                if ((value != 1))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        bool IReference.IsContainment
        {
            get
            {
                return false;
            }
            set
            {
                if ((value != false))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        bool ITypedElement.IsOrdered
        {
            get
            {
                return false;
            }
            set
            {
                if ((value != false))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        bool ITypedElement.IsUnique
        {
            get
            {
                return false;
            }
            set
            {
                if ((value != false))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        /// <summary>
        /// The DeclaringType property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("References")]
        public NMF.Models.Meta.IReferenceType DeclaringType
        {
            get
            {
                return ModelHelper.CastAs<NMF.Models.Meta.IReferenceType>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new AudioStoreChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AudioStoreReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the ComponentType model for this type
        /// </summary>
        public static IComponentType ComponentTypeInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/mediaStore/Repository#//AudioStore")));
                }
                return ((IComponentType)(_classInstance));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/mediaStore/Repository#//AudioStore")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the AudioDB property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AudioDBChanging;
        
        /// <summary>
        /// Gets fired when the AudioDB property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AudioDBChanged;
        
        /// <summary>
        /// Gets fired before the UserManagement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UserManagementChanging;
        
        /// <summary>
        /// Gets fired when the UserManagement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UserManagementChanged;
        
        /// <summary>
        /// Gets fired before the DeclaringType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeclaringTypeChanging;
        
        /// <summary>
        /// Gets fired when the DeclaringType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeclaringTypeChanged;
        
        private static NMF.Models.Meta.ITypedElement RetrieveAudioDBReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(AudioStore.ClassInstance)).Resolve("audioDB")));
        }
        
        /// <summary>
        /// Raises the AudioDBChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAudioDBChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AudioDBChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AudioDBChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAudioDBChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AudioDBChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AudioDB property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAudioDB(object sender, System.EventArgs eventArgs)
        {
            this.AudioDB = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveUserManagementReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(AudioStore.ClassInstance)).Resolve("userManagement")));
        }
        
        /// <summary>
        /// Raises the UserManagementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUserManagementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UserManagementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UserManagementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUserManagementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UserManagementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the UserManagement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUserManagement(object sender, System.EventArgs eventArgs)
        {
            this.UserManagement = null;
        }
        
        private static NMF.Models.Meta.IReferenceType RetrieveReferenceType()
        {
            return NMF.Models.Repository.MetaRepository.Instance.Resolve("http://github.com/georghinkel/DeepADL/1.0#//ResourceContainer").As<NMF.Models.Meta.IReferenceType>();
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDeclaringTypeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.Models.Meta.Reference.ClassInstance)).Resolve("DeclaringType")));
        }
        
        /// <summary>
        /// Raises the DeclaringTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeclaringTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeclaringTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(NMF.Models.IModelElement newParent, NMF.Models.IModelElement oldParent)
        {
            NMF.Models.Meta.IReferenceType oldDeclaringType = ModelHelper.CastAs<NMF.Models.Meta.IReferenceType>(oldParent);
            NMF.Models.Meta.IReferenceType newDeclaringType = ModelHelper.CastAs<NMF.Models.Meta.IReferenceType>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldDeclaringType, newDeclaringType);
            this.OnDeclaringTypeChanging(e);
            this.OnPropertyChanging("DeclaringType", e, _declaringTypeReference);
        }
        
        /// <summary>
        /// Raises the DeclaringTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeclaringTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeclaringTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(NMF.Models.IModelElement newParent, NMF.Models.IModelElement oldParent)
        {
            NMF.Models.Meta.IReferenceType oldDeclaringType = ModelHelper.CastAs<NMF.Models.Meta.IReferenceType>(oldParent);
            NMF.Models.Meta.IReferenceType newDeclaringType = ModelHelper.CastAs<NMF.Models.Meta.IReferenceType>(newParent);
            if ((oldDeclaringType != null))
            {
                oldDeclaringType.References.Remove(this);
            }
            if ((newDeclaringType != null))
            {
                newDeclaringType.References.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldDeclaringType, newDeclaringType);
            this.OnDeclaringTypeChanged(e);
            this.OnPropertyChanged("DeclaringType", e, _declaringTypeReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override NMF.Models.IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "AUDIODB"))
            {
                return this.AudioDB;
            }
            if ((reference == "USERMANAGEMENT"))
            {
                return this.UserManagement;
            }
            if ((reference == "DECLARINGTYPE"))
            {
                return this.DeclaringType;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "AUDIODB"))
            {
                this.AudioDB = ((IAudioDBInterface)(value));
                return;
            }
            if ((feature == "USERMANAGEMENT"))
            {
                this.UserManagement = ((IUserManagementInterface)(value));
                return;
            }
            if ((feature == "DECLARINGTYPE"))
            {
                this.DeclaringType = ((NMF.Models.Meta.IReferenceType)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "AUDIODB"))
            {
                return new AudioDBProxy(this);
            }
            if ((reference == "USERMANAGEMENT"))
            {
                return new UserManagementProxy(this);
            }
            if ((reference == "DECLARINGTYPE"))
            {
                return new DeclaringTypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the ComponentType for this model element
        /// </summary>
        public virtual IComponentType GetComponentType()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/mediaStore/Repository#//AudioStore")));
            }
            return ((IComponentType)(_classInstance));
        }
        
        /// <summary>
        /// Gets the referenced value for a RequiredInterfaces of the enclosing ComponentType.
        /// </summary>
        public virtual IAssemblyContext GetRequiredInterfacesValue(IRequiredInterface reference)
        {
            return ((IAssemblyContext)(this.GetReferencedElement(reference)));
        }
        
        /// <summary>
        /// Gets the referenced value for a RequiredInterfaces of the enclosing ComponentType.
        /// </summary>
        public virtual INotifyValue<IAssemblyContext> GetRequiredInterfacesProxy(IRequiredInterface reference)
        {
            if ((reference == null))
            {
                throw new System.ArgumentOutOfRangeException("reference");
            }
            if ((reference.UpperBound == 1))
            {
                return Observable.As<IModelElement, IAssemblyContext>(this.GetExpressionForReference(reference.Name.ToUpperInvariant()));
            }
            throw new NotSupportedException();
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/mediaStore/Repository#//AudioStore")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AudioStore class
        /// </summary>
        public class AudioStoreChildrenCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private AudioStore _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AudioStoreChildrenCollection(AudioStore parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
            }
            
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AudioStore class
        /// </summary>
        public class AudioStoreReferencedElementsCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private AudioStore _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AudioStoreReferencedElementsCollection(AudioStore parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.AudioDB != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.UserManagement != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DeclaringType != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AudioDBChanged += this.PropagateValueChanges;
                this._parent.UserManagementChanged += this.PropagateValueChanges;
                this._parent.DeclaringTypeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AudioDBChanged -= this.PropagateValueChanges;
                this._parent.UserManagementChanged -= this.PropagateValueChanges;
                this._parent.DeclaringTypeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                if ((this._parent.AudioDB == null))
                {
                    IAudioDBInterface audioDBCasted = item.As<IAudioDBInterface>();
                    if ((audioDBCasted != null))
                    {
                        this._parent.AudioDB = audioDBCasted;
                        return;
                    }
                }
                if ((this._parent.UserManagement == null))
                {
                    IUserManagementInterface userManagementCasted = item.As<IUserManagementInterface>();
                    if ((userManagementCasted != null))
                    {
                        this._parent.UserManagement = userManagementCasted;
                        return;
                    }
                }
                if ((this._parent.DeclaringType == null))
                {
                    IReferenceType declaringTypeCasted = item.As<IReferenceType>();
                    if ((declaringTypeCasted != null))
                    {
                        this._parent.DeclaringType = declaringTypeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AudioDB = null;
                this._parent.UserManagement = null;
                this._parent.DeclaringType = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if ((item == this._parent.AudioDB))
                {
                    return true;
                }
                if ((item == this._parent.UserManagement))
                {
                    return true;
                }
                if ((item == this._parent.DeclaringType))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.AudioDB != null))
                {
                    array[arrayIndex] = this._parent.AudioDB;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.UserManagement != null))
                {
                    array[arrayIndex] = this._parent.UserManagement;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DeclaringType != null))
                {
                    array[arrayIndex] = this._parent.DeclaringType;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                if ((this._parent.AudioDB == item))
                {
                    this._parent.AudioDB = null;
                    return true;
                }
                if ((this._parent.UserManagement == item))
                {
                    this._parent.UserManagement = null;
                    return true;
                }
                if ((this._parent.DeclaringType == item))
                {
                    this._parent.DeclaringType = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.AudioDB).Concat(this._parent.UserManagement).Concat(this._parent.DeclaringType).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the audioDB property
        /// </summary>
        private sealed class AudioDBProxy : ModelPropertyChange<IAudioStore, IAudioDBInterface>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AudioDBProxy(IAudioStore modelElement) : 
                    base(modelElement, "audioDB")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAudioDBInterface Value
            {
                get
                {
                    return this.ModelElement.AudioDB;
                }
                set
                {
                    this.ModelElement.AudioDB = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the userManagement property
        /// </summary>
        private sealed class UserManagementProxy : ModelPropertyChange<IAudioStore, IUserManagementInterface>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UserManagementProxy(IAudioStore modelElement) : 
                    base(modelElement, "userManagement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUserManagementInterface Value
            {
                get
                {
                    return this.ModelElement.UserManagement;
                }
                set
                {
                    this.ModelElement.UserManagement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsOrdered property
        /// </summary>
        private sealed class IsOrderedProxy : ModelPropertyChange<NMF.Models.Meta.ITypedElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsOrderedProxy(NMF.Models.Meta.ITypedElement modelElement) : 
                    base(modelElement, "IsOrdered")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsOrdered;
                }
                set
                {
                    this.ModelElement.IsOrdered = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsUnique property
        /// </summary>
        private sealed class IsUniqueProxy : ModelPropertyChange<NMF.Models.Meta.ITypedElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsUniqueProxy(NMF.Models.Meta.ITypedElement modelElement) : 
                    base(modelElement, "IsUnique")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsUnique;
                }
                set
                {
                    this.ModelElement.IsUnique = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LowerBound property
        /// </summary>
        private sealed class LowerBoundProxy : ModelPropertyChange<NMF.Models.Meta.ITypedElement, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerBoundProxy(NMF.Models.Meta.ITypedElement modelElement) : 
                    base(modelElement, "LowerBound")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.LowerBound;
                }
                set
                {
                    this.ModelElement.LowerBound = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the UpperBound property
        /// </summary>
        private sealed class UpperBoundProxy : ModelPropertyChange<NMF.Models.Meta.ITypedElement, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpperBoundProxy(NMF.Models.Meta.ITypedElement modelElement) : 
                    base(modelElement, "UpperBound")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.UpperBound;
                }
                set
                {
                    this.ModelElement.UpperBound = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<NMF.Models.Meta.ITypedElement, NMF.Models.Meta.IType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(NMF.Models.Meta.ITypedElement modelElement) : 
                    base(modelElement, "Type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IType Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsContainment property
        /// </summary>
        private sealed class IsContainmentProxy : ModelPropertyChange<NMF.Models.Meta.IReference, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsContainmentProxy(NMF.Models.Meta.IReference modelElement) : 
                    base(modelElement, "IsContainment")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsContainment;
                }
                set
                {
                    this.ModelElement.IsContainment = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DeclaringType property
        /// </summary>
        private sealed class DeclaringTypeProxy : ModelPropertyChange<NMF.Models.Meta.IReference, NMF.Models.Meta.IReferenceType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeclaringTypeProxy(NMF.Models.Meta.IReference modelElement) : 
                    base(modelElement, "DeclaringType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IReferenceType Value
            {
                get
                {
                    return this.ModelElement.DeclaringType;
                }
                set
                {
                    this.ModelElement.DeclaringType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Opposite property
        /// </summary>
        private sealed class OppositeProxy : ModelPropertyChange<NMF.Models.Meta.IReference, NMF.Models.Meta.IReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OppositeProxy(NMF.Models.Meta.IReference modelElement) : 
                    base(modelElement, "Opposite")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IReference Value
            {
                get
                {
                    return this.ModelElement.Opposite;
                }
                set
                {
                    this.ModelElement.Opposite = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReferenceType property
        /// </summary>
        private sealed class ReferenceTypeProxy : ModelPropertyChange<NMF.Models.Meta.IReference, NMF.Models.Meta.IReferenceType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReferenceTypeProxy(NMF.Models.Meta.IReference modelElement) : 
                    base(modelElement, "ReferenceType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IReferenceType Value
            {
                get
                {
                    return this.ModelElement.ReferenceType;
                }
                set
                {
                    this.ModelElement.ReferenceType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Refines property
        /// </summary>
        private sealed class RefinesProxy : ModelPropertyChange<NMF.Models.Meta.IReference, NMF.Models.Meta.IReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RefinesProxy(NMF.Models.Meta.IReference modelElement) : 
                    base(modelElement, "Refines")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IReference Value
            {
                get
                {
                    return this.ModelElement.Refines;
                }
                set
                {
                    this.ModelElement.Refines = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Anchor property
        /// </summary>
        private sealed class AnchorProxy : ModelPropertyChange<NMF.Models.Meta.IReference, NMF.Models.Meta.IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AnchorProxy(NMF.Models.Meta.IReference modelElement) : 
                    base(modelElement, "Anchor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IClass Value
            {
                get
                {
                    return this.ModelElement.Anchor;
                }
                set
                {
                    this.ModelElement.Anchor = value;
                }
            }
        }
    }
}

