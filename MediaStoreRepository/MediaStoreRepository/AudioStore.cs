//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using FZI.SoftwareEngineering.DeepModeling.DeepADL;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace FZI.SoftwareEngineering.DeepModeling.Repository
{
    
    
    /// <summary>
    /// The default implementation of the AudioStore class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/georghinkel/mediaStore/Repository")]
    [XmlNamespacePrefixAttribute("repo")]
    [ModelRepresentationClassAttribute("http://github.com/georghinkel/mediaStore/Repository#//AudioStore/")]
    [DebuggerDisplayAttribute("AudioStore {Name}")]
    public class AudioStore : MetaElement, IAudioStore, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AudioDB property
        /// </summary>
        private IAudioDBInterface _audioDB;
        
        /// <summary>
        /// The backing field for the UserManagement property
        /// </summary>
        private IUserManagementInterface _userManagement;
        
        private static IReferenceType _ReferenceType = NMF.Models.Repository.MetaRepository.Instance.Resolve("http://github.com/georghinkel/DeepADL/1.0#//ResourceContainer/").As<IReferenceType>();
        
        /// <summary>
        /// The backing field for the Opposite property
        /// </summary>
        private IReference _opposite;
        
        event EventHandler<ValueChangedEventArgs> IReference.RefinesChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.ReferenceTypeChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.LowerBoundChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.UpperBoundChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.IsContainmentChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.IsOrderedChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.IsUniqueChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.TypeChanged
        {
            add
            {
                IReference _this_Reference = this;
                _this_Reference.ReferenceTypeChanged += value;
            }
            remove
            {
                IReference _this_Reference = this;
                _this_Reference.ReferenceTypeChanged -= value;
            }
        }
        
        /// <summary>
        /// The audioDB property
        /// </summary>
        [XmlElementNameAttribute("audioDB")]
        [XmlAttributeAttribute(true)]
        public virtual IAudioDBInterface AudioDB
        {
            get
            {
                return this._audioDB;
            }
            set
            {
                if ((this._audioDB != value))
                {
                    IAudioDBInterface old = this._audioDB;
                    this._audioDB = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAudioDB;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAudioDB;
                    }
                    this.OnPropertyChanged("AudioDB");
                    this.OnAudioDBChanged(new ValueChangedEventArgs(old, value));
                }
            }
        }
        
        /// <summary>
        /// The userManagement property
        /// </summary>
        [XmlElementNameAttribute("userManagement")]
        [XmlAttributeAttribute(true)]
        public virtual IUserManagementInterface UserManagement
        {
            get
            {
                return this._userManagement;
            }
            set
            {
                if ((this._userManagement != value))
                {
                    IUserManagementInterface old = this._userManagement;
                    this._userManagement = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetUserManagement;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetUserManagement;
                    }
                    this.OnPropertyChanged("UserManagement");
                    this.OnUserManagementChanged(new ValueChangedEventArgs(old, value));
                }
            }
        }
        
        IReference IReference.Refines
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        IReferenceType IReference.ReferenceType
        {
            get
            {
                return _ReferenceType;
            }
            set
            {
                if ((value != _ReferenceType))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        int ITypedElement.LowerBound
        {
            get
            {
                return 1;
            }
            set
            {
                if ((value != 1))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        int ITypedElement.UpperBound
        {
            get
            {
                return 1;
            }
            set
            {
                if ((value != 1))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        bool IReference.IsContainment
        {
            get
            {
                return true;
            }
            set
            {
                if ((value != true))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        bool ITypedElement.IsOrdered
        {
            get
            {
                return false;
            }
            set
            {
                if ((value != false))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        bool ITypedElement.IsUnique
        {
            get
            {
                return false;
            }
            set
            {
                if ((value != false))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        /// <summary>
        /// The DeclaringType property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("References")]
        public virtual IReferenceType DeclaringType
        {
            get
            {
                return ModelHelper.CastAs<IReferenceType>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The Opposite property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Opposite")]
        public virtual IReference Opposite
        {
            get
            {
                return this._opposite;
            }
            set
            {
                if ((this._opposite != value))
                {
                    IReference old = this._opposite;
                    this._opposite = value;
                    if ((old != null))
                    {
                        old.Opposite = null;
                        old.Deleted -= this.OnResetOpposite;
                    }
                    if ((value != null))
                    {
                        value.Opposite = this;
                        value.Deleted += this.OnResetOpposite;
                    }
                    this.OnPropertyChanged("Opposite");
                    this.OnOppositeChanged(new ValueChangedEventArgs(old, value));
                }
            }
        }
        
        IType ITypedElement.Type
        {
            get
            {
                IReference _this = this;
                if ((_this.ReferenceType != null))
                {
                    return _this.ReferenceType;
                }
                return null;
            }
            set
            {
                IReference _this = this;
                if ((value != null))
                {
                    IReferenceType @__ReferenceType = value.As<IReferenceType>();
                    if ((@__ReferenceType != null))
                    {
                        _this.ReferenceType = @__ReferenceType;
                        return;
                    }
                }
                else
                {
                    _this.ReferenceType = null;
                    return;
                }
                throw new System.ArgumentException("There was no suitable refining reference found for this object");
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AudioStoreReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://github.com/georghinkel/mediaStore/Repository#//AudioStore/");
            }
        }
        
        /// <summary>
        /// Gets fired when the AudioDB property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AudioDBChanged;
        
        /// <summary>
        /// Gets fired when the UserManagement property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> UserManagementChanged;
        
        /// <summary>
        /// Gets fired when the DeclaringType property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DeclaringTypeChanged;
        
        /// <summary>
        /// Gets fired when the Opposite property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OppositeChanged;
        
        /// <summary>
        /// Raises the AudioDBChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAudioDBChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AudioDBChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AudioDB property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAudioDB(object sender, EventArgs eventArgs)
        {
            this.AudioDB = null;
        }
        
        /// <summary>
        /// Raises the UserManagementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUserManagementChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.UserManagementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the UserManagement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUserManagement(object sender, EventArgs eventArgs)
        {
            this.UserManagement = null;
        }
        
        /// <summary>
        /// Raises the DeclaringTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeclaringTypeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DeclaringTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IReferenceType oldDeclaringType = ModelHelper.CastAs<IReferenceType>(oldParent);
            IReferenceType newDeclaringType = ModelHelper.CastAs<IReferenceType>(newParent);
            if ((oldDeclaringType != null))
            {
                oldDeclaringType.References.Remove(this);
            }
            if ((newDeclaringType != null))
            {
                newDeclaringType.References.Add(this);
            }
            this.OnPropertyChanged("DeclaringType");
            this.OnDeclaringTypeChanged(new ValueChangedEventArgs(oldDeclaringType, newDeclaringType));
        }
        
        /// <summary>
        /// Raises the OppositeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOppositeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OppositeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Opposite property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpposite(object sender, EventArgs eventArgs)
        {
            this.Opposite = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "AUDIODB"))
            {
                this.AudioDB = ((IAudioDBInterface)(value));
                return;
            }
            if ((feature == "USERMANAGEMENT"))
            {
                this.UserManagement = ((IUserManagementInterface)(value));
                return;
            }
            if ((feature == "DECLARINGTYPE"))
            {
                this.DeclaringType = ((IReferenceType)(value));
                return;
            }
            if ((feature == "OPPOSITE"))
            {
                this.Opposite = ((IReference)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "AUDIODB"))
            {
                return new AudioDBProxy(this);
            }
            if ((attribute == "USERMANAGEMENT"))
            {
                return new UserManagementProxy(this);
            }
            if ((attribute == "DECLARINGTYPE"))
            {
                return new DeclaringTypeProxy(this);
            }
            if ((attribute == "OPPOSITE"))
            {
                return new OppositeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "AUDIODB"))
            {
                return new AudioDBProxy(this);
            }
            if ((reference == "USERMANAGEMENT"))
            {
                return new UserManagementProxy(this);
            }
            if ((reference == "DECLARINGTYPE"))
            {
                return new DeclaringTypeProxy(this);
            }
            if ((reference == "OPPOSITE"))
            {
                return new OppositeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the ComponentType for this model element
        /// </summary>
        public IComponentType GetComponentType()
        {
            return ((IComponentType)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://github.com/georghinkel/mediaStore/Repository#//AudioStore/")));
        }
        
        /// <summary>
        /// Gets the referenced value for a RequiredInterfaces of the enclosing ComponentType.
        /// </summary>
        public IAssemblyContext GetRequiredInterfacesValue(IRequiredInterface reference)
        {
            return ((IAssemblyContext)(this.GetReferencedElement(reference)));
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://github.com/georghinkel/mediaStore/Repository#//AudioStore/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AudioStore class
        /// </summary>
        public class AudioStoreReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AudioStore _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AudioStoreReferencedElementsCollection(AudioStore parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.AudioDB != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.UserManagement != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DeclaringType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Opposite != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AudioDBChanged += this.PropagateValueChanges;
                this._parent.UserManagementChanged += this.PropagateValueChanges;
                this._parent.DeclaringTypeChanged += this.PropagateValueChanges;
                this._parent.OppositeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AudioDBChanged -= this.PropagateValueChanges;
                this._parent.UserManagementChanged -= this.PropagateValueChanges;
                this._parent.DeclaringTypeChanged -= this.PropagateValueChanges;
                this._parent.OppositeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.AudioDB == null))
                {
                    IAudioDBInterface audioDBCasted = item.As<IAudioDBInterface>();
                    if ((audioDBCasted != null))
                    {
                        this._parent.AudioDB = audioDBCasted;
                        return;
                    }
                }
                if ((this._parent.UserManagement == null))
                {
                    IUserManagementInterface userManagementCasted = item.As<IUserManagementInterface>();
                    if ((userManagementCasted != null))
                    {
                        this._parent.UserManagement = userManagementCasted;
                        return;
                    }
                }
                if ((this._parent.DeclaringType == null))
                {
                    IReferenceType declaringTypeCasted = item.As<IReferenceType>();
                    if ((declaringTypeCasted != null))
                    {
                        this._parent.DeclaringType = declaringTypeCasted;
                        return;
                    }
                }
                if ((this._parent.Opposite == null))
                {
                    IReference oppositeCasted = item.As<IReference>();
                    if ((oppositeCasted != null))
                    {
                        this._parent.Opposite = oppositeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AudioDB = null;
                this._parent.UserManagement = null;
                this._parent.DeclaringType = null;
                this._parent.Opposite = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.AudioDB))
                {
                    return true;
                }
                if ((item == this._parent.UserManagement))
                {
                    return true;
                }
                if ((item == this._parent.DeclaringType))
                {
                    return true;
                }
                if ((item == this._parent.Opposite))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.AudioDB != null))
                {
                    array[arrayIndex] = this._parent.AudioDB;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.UserManagement != null))
                {
                    array[arrayIndex] = this._parent.UserManagement;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DeclaringType != null))
                {
                    array[arrayIndex] = this._parent.DeclaringType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Opposite != null))
                {
                    array[arrayIndex] = this._parent.Opposite;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.AudioDB == item))
                {
                    this._parent.AudioDB = null;
                    return true;
                }
                if ((this._parent.UserManagement == item))
                {
                    this._parent.UserManagement = null;
                    return true;
                }
                if ((this._parent.DeclaringType == item))
                {
                    this._parent.DeclaringType = null;
                    return true;
                }
                if ((this._parent.Opposite == item))
                {
                    this._parent.Opposite = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AudioDB).Concat(this._parent.UserManagement).Concat(this._parent.DeclaringType).Concat(this._parent.Opposite).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the audioDB property
        /// </summary>
        private sealed class AudioDBProxy : ModelPropertyChange<IAudioStore, IAudioDBInterface>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AudioDBProxy(IAudioStore modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAudioDBInterface Value
            {
                get
                {
                    return this.ModelElement.AudioDB;
                }
                set
                {
                    this.ModelElement.AudioDB = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AudioDBChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AudioDBChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the userManagement property
        /// </summary>
        private sealed class UserManagementProxy : ModelPropertyChange<IAudioStore, IUserManagementInterface>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UserManagementProxy(IAudioStore modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUserManagementInterface Value
            {
                get
                {
                    return this.ModelElement.UserManagement;
                }
                set
                {
                    this.ModelElement.UserManagement = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UserManagementChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UserManagementChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsContainment property
        /// </summary>
        private sealed class IsContainmentProxy : ModelPropertyChange<IReference, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsContainmentProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsContainment;
                }
                set
                {
                    this.ModelElement.IsContainment = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsContainmentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsContainmentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DeclaringType property
        /// </summary>
        private sealed class DeclaringTypeProxy : ModelPropertyChange<IReference, IReferenceType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeclaringTypeProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReferenceType Value
            {
                get
                {
                    return this.ModelElement.DeclaringType;
                }
                set
                {
                    this.ModelElement.DeclaringType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DeclaringTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DeclaringTypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Opposite property
        /// </summary>
        private sealed class OppositeProxy : ModelPropertyChange<IReference, IReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OppositeProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReference Value
            {
                get
                {
                    return this.ModelElement.Opposite;
                }
                set
                {
                    this.ModelElement.Opposite = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OppositeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OppositeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReferenceType property
        /// </summary>
        private sealed class ReferenceTypeProxy : ModelPropertyChange<IReference, IReferenceType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReferenceTypeProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReferenceType Value
            {
                get
                {
                    return this.ModelElement.ReferenceType;
                }
                set
                {
                    this.ModelElement.ReferenceType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReferenceTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReferenceTypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Refines property
        /// </summary>
        private sealed class RefinesProxy : ModelPropertyChange<IReference, IReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RefinesProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReference Value
            {
                get
                {
                    return this.ModelElement.Refines;
                }
                set
                {
                    this.ModelElement.Refines = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RefinesChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RefinesChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsOrdered property
        /// </summary>
        private sealed class IsOrderedProxy : ModelPropertyChange<ITypedElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsOrderedProxy(ITypedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsOrdered;
                }
                set
                {
                    this.ModelElement.IsOrdered = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsOrderedChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsOrderedChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsUnique property
        /// </summary>
        private sealed class IsUniqueProxy : ModelPropertyChange<ITypedElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsUniqueProxy(ITypedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsUnique;
                }
                set
                {
                    this.ModelElement.IsUnique = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsUniqueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsUniqueChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LowerBound property
        /// </summary>
        private sealed class LowerBoundProxy : ModelPropertyChange<ITypedElement, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerBoundProxy(ITypedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.LowerBound;
                }
                set
                {
                    this.ModelElement.LowerBound = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowerBoundChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowerBoundChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the UpperBound property
        /// </summary>
        private sealed class UpperBoundProxy : ModelPropertyChange<ITypedElement, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpperBoundProxy(ITypedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.UpperBound;
                }
                set
                {
                    this.ModelElement.UpperBound = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UpperBoundChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UpperBoundChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<ITypedElement, IType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(ITypedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IType Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeChanged -= handler;
            }
        }
    }
}

