//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using FZI.SoftwareEngineering.DeepModeling.DeepADL;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace FZI.SoftwareEngineering.DeepModeling.Repository
{
    
    
    /// <summary>
    /// The default implementation of the MediaStoreSystem class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/georghinkel/mediaStore/Repository")]
    [XmlNamespacePrefixAttribute("repo")]
    [ModelRepresentationClassAttribute("http://github.com/georghinkel/mediaStore/Repository#//MediaStoreSystem")]
    [DebuggerDisplayAttribute("MediaStoreSystem {Name}")]
    public partial class MediaStoreSystem : SystemArchitecture, IMediaStoreSystem, NMF.Models.IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _frontendReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveFrontendReference);
        
        /// <summary>
        /// The backing field for the Frontend property
        /// </summary>
        private IHTTP _frontend;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The Frontend property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public IHTTP Frontend
        {
            get
            {
                return this._frontend;
            }
            set
            {
                if ((this._frontend != value))
                {
                    IHTTP old = this._frontend;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFrontendChanging(e);
                    this.OnPropertyChanging("Frontend", e, _frontendReference);
                    this._frontend = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFrontend;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFrontend;
                    }
                    this.OnFrontendChanged(e);
                    this.OnPropertyChanged("Frontend", e, _frontendReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MediaStoreSystemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/mediaStore/Repository#//MediaStoreSystem")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Frontend property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrontendChanging;
        
        /// <summary>
        /// Gets fired when the Frontend property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrontendChanged;
        
        private static NMF.Models.Meta.ITypedElement RetrieveFrontendReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(MediaStoreSystem.ClassInstance)).Resolve("Frontend")));
        }
        
        /// <summary>
        /// Raises the FrontendChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrontendChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrontendChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FrontendChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrontendChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrontendChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Frontend property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFrontend(object sender, System.EventArgs eventArgs)
        {
            this.Frontend = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override NMF.Models.IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "FRONTEND"))
            {
                return this.Frontend;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FRONTEND"))
            {
                this.Frontend = ((IHTTP)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "FRONTEND"))
            {
                return new FrontendProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/mediaStore/Repository#//MediaStoreSystem")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MediaStoreSystem class
        /// </summary>
        public class MediaStoreSystemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private MediaStoreSystem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MediaStoreSystemReferencedElementsCollection(MediaStoreSystem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Frontend != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.FrontendChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.FrontendChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                if ((this._parent.Frontend == null))
                {
                    IHTTP frontendCasted = item.As<IHTTP>();
                    if ((frontendCasted != null))
                    {
                        this._parent.Frontend = frontendCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Frontend = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if ((item == this._parent.Frontend))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Frontend != null))
                {
                    array[arrayIndex] = this._parent.Frontend;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                if ((this._parent.Frontend == item))
                {
                    this._parent.Frontend = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.Frontend).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Frontend property
        /// </summary>
        private sealed class FrontendProxy : ModelPropertyChange<IMediaStoreSystem, IHTTP>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FrontendProxy(IMediaStoreSystem modelElement) : 
                    base(modelElement, "Frontend")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHTTP Value
            {
                get
                {
                    return this.ModelElement.Frontend;
                }
                set
                {
                    this.ModelElement.Frontend = value;
                }
            }
        }
    }
}

