//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace FZI.SoftwareEngineering.DeepModeling.DeepADL
{
    
    
    /// <summary>
    /// The default implementation of the ComponentType class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/georghinkel/DeepADL/1.0")]
    [XmlNamespacePrefixAttribute("core")]
    [ModelRepresentationClassAttribute("http://github.com/georghinkel/DeepADL/1.0#//ComponentType")]
    [DebuggerDisplayAttribute("ComponentType {Name}")]
    public partial class ComponentType : NMF.Models.Meta.MetaElement, IComponentType, NMF.Models.IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _requiredInterfacesReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRequiredInterfacesReference);
        
        /// <summary>
        /// The backing field for the RequiredInterfaces property
        /// </summary>
        private ObservableCompositionList<IRequiredInterface> _requiredInterfaces;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _providedInterfacesReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveProvidedInterfacesReference);
        
        /// <summary>
        /// The backing field for the ProvidedInterfaces property
        /// </summary>
        private ObservableAssociationList<IInterface> _providedInterfaces;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _servicesReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveServicesReference);
        
        /// <summary>
        /// The backing field for the Services property
        /// </summary>
        private ObservableCompositionList<IService> _services;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _repositoryReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRepositoryReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        event EventHandler<ValueChangedEventArgs> IType.NamespaceChanged
        {
            add
            {
                IComponentType _this_IComponentType = this;
                _this_IComponentType.RepositoryChanged += value;
            }
            remove
            {
                IComponentType _this_IComponentType = this;
                _this_IComponentType.RepositoryChanged -= value;
            }
        }
        event EventHandler<ValueChangedEventArgs> IType.NamespaceChanging
        {
            add
            {
                IComponentType _this_IComponentType = this;
                _this_IComponentType.RepositoryChanging += value;
            }
            remove
            {
                IComponentType _this_IComponentType = this;
                _this_IComponentType.RepositoryChanging -= value;
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IdentifierChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IdentifierChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.InstanceOfChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.InstanceOfChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IdentifierScopeChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IdentifierScopeChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IsAbstractChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IsAbstractChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        
        public ComponentType()
        {
            this._requiredInterfaces = new ObservableCompositionList<IRequiredInterface>(this);
            this._requiredInterfaces.CollectionChanging += this.RequiredInterfacesCollectionChanging;
            this._requiredInterfaces.CollectionChanged += this.RequiredInterfacesCollectionChanged;
            this._providedInterfaces = new ObservableAssociationList<IInterface>();
            this._providedInterfaces.CollectionChanging += this.ProvidedInterfacesCollectionChanging;
            this._providedInterfaces.CollectionChanged += this.ProvidedInterfacesCollectionChanged;
            this._services = new ObservableCompositionList<IService>(this);
            this._services.CollectionChanging += this.ServicesCollectionChanging;
            this._services.CollectionChanged += this.ServicesCollectionChanged;
        }
        
        /// <summary>
        /// The RequiredInterfaces property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ICollectionExpression<IRequiredInterface> RequiredInterfaces
        {
            get
            {
                return this._requiredInterfaces;
            }
        }
        
        /// <summary>
        /// The ProvidedInterfaces property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ICollectionExpression<IInterface> ProvidedInterfaces
        {
            get
            {
                return this._providedInterfaces;
            }
        }
        
        /// <summary>
        /// The Services property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ICollectionExpression<IService> Services
        {
            get
            {
                return this._services;
            }
        }
        
        /// <summary>
        /// The Repository property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ComponentTypes")]
        public IRepository Repository
        {
            get
            {
                return ModelHelper.CastAs<IRepository>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        ICollectionExpression<NMF.Models.Meta.IReference> IReferenceType.References
        {
            get
            {
                return new ComponentTypeReferencesCollection(this);
            }
        }
        
        ICollectionExpression<NMF.Models.Meta.IClass> IClass.BaseTypes
        {
            get
            {
                return new ComponentTypeBaseTypesCollection(this);
            }
        }
        
        NMF.Models.Meta.INamespace IType.Namespace
        {
            get
            {
                IComponentType _this = this;
                if ((_this.Repository != null))
                {
                    return _this.Repository;
                }
                return null;
            }
            set
            {
                IComponentType _this = this;
                if ((value != null))
                {
                    IRepository @__Repository = value.As<IRepository>();
                    if ((@__Repository != null))
                    {
                        _this.Repository = @__Repository;
                        return;
                    }
                }
                else
                {
                    _this.Repository = null;
                    return;
                }
                throw new System.ArgumentException("There was no suitable refining reference found for this object");
            }
        }
        
        ICollectionExpression<NMF.Models.Meta.IReferenceConstraint> IClass.ReferenceConstraints
        {
            get
            {
                return EmptyList<NMF.Models.Meta.IReferenceConstraint>.Instance;
            }
        }
        
        ICollectionExpression<NMF.Models.Meta.IAttribute> IStructuredType.Attributes
        {
            get
            {
                return EmptyList<NMF.Models.Meta.IAttribute>.Instance;
            }
        }
        
        ICollectionExpression<NMF.Models.Meta.IAttributeConstraint> IClass.AttributeConstraints
        {
            get
            {
                return EmptyList<NMF.Models.Meta.IAttributeConstraint>.Instance;
            }
        }
        
        ICollectionExpression<NMF.Models.Meta.IEvent> IReferenceType.Events
        {
            get
            {
                return EmptyList<NMF.Models.Meta.IEvent>.Instance;
            }
        }
        
        NMF.Models.Meta.IAttribute IClass.Identifier
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        ICollectionExpression<NMF.Models.Meta.IOperation> IStructuredType.Operations
        {
            get
            {
                return EmptyList<NMF.Models.Meta.IOperation>.Instance;
            }
        }
        
        NMF.Models.Meta.IClass IClass.InstanceOf
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        NMF.Models.Meta.IdentifierScope IClass.IdentifierScope
        {
            get
            {
                return NMF.Models.Meta.IdentifierScope.Local;
            }
            set
            {
                if ((value != NMF.Models.Meta.IdentifierScope.Local))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        bool IClass.IsAbstract
        {
            get
            {
                return false;
            }
            set
            {
                if ((value != false))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ComponentTypeChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ComponentTypeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/DeepADL/1.0#//ComponentType")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Repository property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RepositoryChanging;
        
        /// <summary>
        /// Gets fired when the Repository property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RepositoryChanged;
        
        private static NMF.Models.Meta.ITypedElement RetrieveRequiredInterfacesReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(ComponentType.ClassInstance)).Resolve("RequiredInterfaces")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RequiredInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RequiredInterfacesCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("RequiredInterfaces", e, _requiredInterfacesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RequiredInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RequiredInterfacesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RequiredInterfaces", e, _requiredInterfacesReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveProvidedInterfacesReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(ComponentType.ClassInstance)).Resolve("ProvidedInterfaces")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ProvidedInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProvidedInterfacesCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ProvidedInterfaces", e, _providedInterfacesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ProvidedInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProvidedInterfacesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ProvidedInterfaces", e, _providedInterfacesReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveServicesReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(ComponentType.ClassInstance)).Resolve("Services")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Services property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServicesCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Services", e, _servicesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Services property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServicesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Services", e, _servicesReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRepositoryReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(ComponentType.ClassInstance)).Resolve("Repository")));
        }
        
        /// <summary>
        /// Raises the RepositoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRepositoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RepositoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(NMF.Models.IModelElement newParent, NMF.Models.IModelElement oldParent)
        {
            IRepository oldRepository = ModelHelper.CastAs<IRepository>(oldParent);
            IRepository newRepository = ModelHelper.CastAs<IRepository>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldRepository, newRepository);
            this.OnRepositoryChanging(e);
            this.OnPropertyChanging("Repository", e, _repositoryReference);
        }
        
        /// <summary>
        /// Raises the RepositoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRepositoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RepositoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(NMF.Models.IModelElement newParent, NMF.Models.IModelElement oldParent)
        {
            IRepository oldRepository = ModelHelper.CastAs<IRepository>(oldParent);
            IRepository newRepository = ModelHelper.CastAs<IRepository>(newParent);
            if ((oldRepository != null))
            {
                oldRepository.ComponentTypes.Remove(this);
            }
            if ((newRepository != null))
            {
                newRepository.ComponentTypes.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldRepository, newRepository);
            this.OnRepositoryChanged(e);
            this.OnPropertyChanged("Repository", e, _repositoryReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override NMF.Models.IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "REPOSITORY"))
            {
                return this.Repository;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "REQUIREDINTERFACES"))
            {
                return this._requiredInterfaces;
            }
            if ((feature == "PROVIDEDINTERFACES"))
            {
                return this._providedInterfaces;
            }
            if ((feature == "SERVICES"))
            {
                return this._services;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REPOSITORY"))
            {
                this.Repository = ((IRepository)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "REPOSITORY"))
            {
                return new RepositoryProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._requiredInterfaces))
            {
                return "RequiredInterfaces";
            }
            if ((container == this._services))
            {
                return "Services";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/DeepADL/1.0#//ComponentType")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ComponentType class
        /// </summary>
        public class ComponentTypeChildrenCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private ComponentType _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ComponentTypeChildrenCollection(ComponentType parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.RequiredInterfaces.Count);
                    count = (count + this._parent.Services.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.RequiredInterfaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Services.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.RequiredInterfaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Services.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                IRequiredInterface requiredInterfacesCasted = item.As<IRequiredInterface>();
                if ((requiredInterfacesCasted != null))
                {
                    this._parent.RequiredInterfaces.Add(requiredInterfacesCasted);
                }
                IService servicesCasted = item.As<IService>();
                if ((servicesCasted != null))
                {
                    this._parent.Services.Add(servicesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.RequiredInterfaces.Clear();
                this._parent.Services.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if (this._parent.RequiredInterfaces.Contains(item))
                {
                    return true;
                }
                if (this._parent.Services.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                IEnumerator<NMF.Models.IModelElement> requiredInterfacesEnumerator = this._parent.RequiredInterfaces.GetEnumerator();
                try
                {
                    for (
                    ; requiredInterfacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = requiredInterfacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    requiredInterfacesEnumerator.Dispose();
                }
                IEnumerator<NMF.Models.IModelElement> servicesEnumerator = this._parent.Services.GetEnumerator();
                try
                {
                    for (
                    ; servicesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = servicesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    servicesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                IRequiredInterface requiredInterfaceItem = item.As<IRequiredInterface>();
                if (((requiredInterfaceItem != null) 
                            && this._parent.RequiredInterfaces.Remove(requiredInterfaceItem)))
                {
                    return true;
                }
                IService serviceItem = item.As<IService>();
                if (((serviceItem != null) 
                            && this._parent.Services.Remove(serviceItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.RequiredInterfaces).Concat(this._parent.Services).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ComponentType class
        /// </summary>
        public class ComponentTypeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private ComponentType _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ComponentTypeReferencedElementsCollection(ComponentType parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.RequiredInterfaces.Count);
                    count = (count + this._parent.ProvidedInterfaces.Count);
                    count = (count + this._parent.Services.Count);
                    if ((this._parent.Repository != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.RequiredInterfaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ProvidedInterfaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Services.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RepositoryChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.RequiredInterfaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ProvidedInterfaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Services.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RepositoryChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                IRequiredInterface requiredInterfacesCasted = item.As<IRequiredInterface>();
                if ((requiredInterfacesCasted != null))
                {
                    this._parent.RequiredInterfaces.Add(requiredInterfacesCasted);
                }
                IInterface providedInterfacesCasted = item.As<IInterface>();
                if ((providedInterfacesCasted != null))
                {
                    this._parent.ProvidedInterfaces.Add(providedInterfacesCasted);
                }
                IService servicesCasted = item.As<IService>();
                if ((servicesCasted != null))
                {
                    this._parent.Services.Add(servicesCasted);
                }
                if ((this._parent.Repository == null))
                {
                    IRepository repositoryCasted = item.As<IRepository>();
                    if ((repositoryCasted != null))
                    {
                        this._parent.Repository = repositoryCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.RequiredInterfaces.Clear();
                this._parent.ProvidedInterfaces.Clear();
                this._parent.Services.Clear();
                this._parent.Repository = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if (this._parent.RequiredInterfaces.Contains(item))
                {
                    return true;
                }
                if (this._parent.ProvidedInterfaces.Contains(item))
                {
                    return true;
                }
                if (this._parent.Services.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Repository))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                IEnumerator<NMF.Models.IModelElement> requiredInterfacesEnumerator = this._parent.RequiredInterfaces.GetEnumerator();
                try
                {
                    for (
                    ; requiredInterfacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = requiredInterfacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    requiredInterfacesEnumerator.Dispose();
                }
                IEnumerator<NMF.Models.IModelElement> providedInterfacesEnumerator = this._parent.ProvidedInterfaces.GetEnumerator();
                try
                {
                    for (
                    ; providedInterfacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = providedInterfacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    providedInterfacesEnumerator.Dispose();
                }
                IEnumerator<NMF.Models.IModelElement> servicesEnumerator = this._parent.Services.GetEnumerator();
                try
                {
                    for (
                    ; servicesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = servicesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    servicesEnumerator.Dispose();
                }
                if ((this._parent.Repository != null))
                {
                    array[arrayIndex] = this._parent.Repository;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                IRequiredInterface requiredInterfaceItem = item.As<IRequiredInterface>();
                if (((requiredInterfaceItem != null) 
                            && this._parent.RequiredInterfaces.Remove(requiredInterfaceItem)))
                {
                    return true;
                }
                IInterface interfaceItem = item.As<IInterface>();
                if (((interfaceItem != null) 
                            && this._parent.ProvidedInterfaces.Remove(interfaceItem)))
                {
                    return true;
                }
                IService serviceItem = item.As<IService>();
                if (((serviceItem != null) 
                            && this._parent.Services.Remove(serviceItem)))
                {
                    return true;
                }
                if ((this._parent.Repository == item))
                {
                    this._parent.Repository = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.RequiredInterfaces).Concat(this._parent.ProvidedInterfaces).Concat(this._parent.Services).Concat(this._parent.Repository).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Repository property
        /// </summary>
        private sealed class RepositoryProxy : ModelPropertyChange<IComponentType, IRepository>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RepositoryProxy(IComponentType modelElement) : 
                    base(modelElement, "Repository")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRepository Value
            {
                get
                {
                    return this.ModelElement.Repository;
                }
                set
                {
                    this.ModelElement.Repository = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Namespace property
        /// </summary>
        private sealed class NamespaceProxy : ModelPropertyChange<NMF.Models.Meta.IType, NMF.Models.Meta.INamespace>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NamespaceProxy(NMF.Models.Meta.IType modelElement) : 
                    base(modelElement, "Namespace")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.INamespace Value
            {
                get
                {
                    return this.ModelElement.Namespace;
                }
                set
                {
                    this.ModelElement.Namespace = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsAbstract property
        /// </summary>
        private sealed class IsAbstractProxy : ModelPropertyChange<NMF.Models.Meta.IClass, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAbstractProxy(NMF.Models.Meta.IClass modelElement) : 
                    base(modelElement, "IsAbstract")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAbstract;
                }
                set
                {
                    this.ModelElement.IsAbstract = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IdentifierScope property
        /// </summary>
        private sealed class IdentifierScopeProxy : ModelPropertyChange<NMF.Models.Meta.IClass, NMF.Models.Meta.IdentifierScope>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierScopeProxy(NMF.Models.Meta.IClass modelElement) : 
                    base(modelElement, "IdentifierScope")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IdentifierScope Value
            {
                get
                {
                    return this.ModelElement.IdentifierScope;
                }
                set
                {
                    this.ModelElement.IdentifierScope = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the InstanceOf property
        /// </summary>
        private sealed class InstanceOfProxy : ModelPropertyChange<NMF.Models.Meta.IClass, NMF.Models.Meta.IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstanceOfProxy(NMF.Models.Meta.IClass modelElement) : 
                    base(modelElement, "InstanceOf")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IClass Value
            {
                get
                {
                    return this.ModelElement.InstanceOf;
                }
                set
                {
                    this.ModelElement.InstanceOf = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Identifier property
        /// </summary>
        private sealed class IdentifierProxy : ModelPropertyChange<NMF.Models.Meta.IClass, NMF.Models.Meta.IAttribute>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierProxy(NMF.Models.Meta.IClass modelElement) : 
                    base(modelElement, "Identifier")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IAttribute Value
            {
                get
                {
                    return this.ModelElement.Identifier;
                }
                set
                {
                    this.ModelElement.Identifier = value;
                }
            }
        }
    }
}

