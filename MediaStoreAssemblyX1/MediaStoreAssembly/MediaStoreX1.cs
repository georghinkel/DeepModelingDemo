//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using FZI.SoftwareEngineering.DeepModeling.DeepADL;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace FZI.SoftwareEngineering.DeepModeling.AssemblyX1
{
    
    
    /// <summary>
    /// The default implementation of the MediaStoreX1 class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/georghinkel/mediaStore/AssemblyX1")]
    [XmlNamespacePrefixAttribute("mediaStoreX1")]
    [ModelRepresentationClassAttribute("http://github.com/georghinkel/mediaStore/AssemblyX1#//MediaStoreX1")]
    public partial class MediaStoreX1 : SystemAllocation, IMediaStoreX1, NMF.Models.IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _webForm1Reference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveWebForm1Reference);
        
        /// <summary>
        /// The backing field for the WebForm1 property
        /// </summary>
        private IResourceContainer _webForm1;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _audioStore1Reference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveAudioStore1Reference);
        
        /// <summary>
        /// The backing field for the AudioStore1 property
        /// </summary>
        private IResourceContainer _audioStore1;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _userManagement1Reference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveUserManagement1Reference);
        
        /// <summary>
        /// The backing field for the UserManagement1 property
        /// </summary>
        private IResourceContainer _userManagement1;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _encodingAdapter1Reference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveEncodingAdapter1Reference);
        
        /// <summary>
        /// The backing field for the EncodingAdapter1 property
        /// </summary>
        private IResourceContainer _encodingAdapter1;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _oggEncoder1Reference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOggEncoder1Reference);
        
        /// <summary>
        /// The backing field for the OggEncoder1 property
        /// </summary>
        private IResourceContainer _oggEncoder1;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _dBAdapter1Reference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDBAdapter1Reference);
        
        /// <summary>
        /// The backing field for the DBAdapter1 property
        /// </summary>
        private IResourceContainer _dBAdapter1;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _mySqlClient1Reference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveMySqlClient1Reference);
        
        /// <summary>
        /// The backing field for the MySqlClient1 property
        /// </summary>
        private IResourceContainer _mySqlClient1;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The WebForm1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public IResourceContainer WebForm1
        {
            get
            {
                return this._webForm1;
            }
            set
            {
                if ((this._webForm1 != value))
                {
                    IResourceContainer old = this._webForm1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWebForm1Changing(e);
                    this.OnPropertyChanging("WebForm1", e, _webForm1Reference);
                    this._webForm1 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetWebForm1;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetWebForm1;
                    }
                    this.OnWebForm1Changed(e);
                    this.OnPropertyChanged("WebForm1", e, _webForm1Reference);
                }
            }
        }
        
        /// <summary>
        /// The AudioStore1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public IResourceContainer AudioStore1
        {
            get
            {
                return this._audioStore1;
            }
            set
            {
                if ((this._audioStore1 != value))
                {
                    IResourceContainer old = this._audioStore1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAudioStore1Changing(e);
                    this.OnPropertyChanging("AudioStore1", e, _audioStore1Reference);
                    this._audioStore1 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAudioStore1;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAudioStore1;
                    }
                    this.OnAudioStore1Changed(e);
                    this.OnPropertyChanged("AudioStore1", e, _audioStore1Reference);
                }
            }
        }
        
        /// <summary>
        /// The UserManagement1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public IResourceContainer UserManagement1
        {
            get
            {
                return this._userManagement1;
            }
            set
            {
                if ((this._userManagement1 != value))
                {
                    IResourceContainer old = this._userManagement1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUserManagement1Changing(e);
                    this.OnPropertyChanging("UserManagement1", e, _userManagement1Reference);
                    this._userManagement1 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetUserManagement1;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetUserManagement1;
                    }
                    this.OnUserManagement1Changed(e);
                    this.OnPropertyChanged("UserManagement1", e, _userManagement1Reference);
                }
            }
        }
        
        /// <summary>
        /// The EncodingAdapter1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public IResourceContainer EncodingAdapter1
        {
            get
            {
                return this._encodingAdapter1;
            }
            set
            {
                if ((this._encodingAdapter1 != value))
                {
                    IResourceContainer old = this._encodingAdapter1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEncodingAdapter1Changing(e);
                    this.OnPropertyChanging("EncodingAdapter1", e, _encodingAdapter1Reference);
                    this._encodingAdapter1 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEncodingAdapter1;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEncodingAdapter1;
                    }
                    this.OnEncodingAdapter1Changed(e);
                    this.OnPropertyChanged("EncodingAdapter1", e, _encodingAdapter1Reference);
                }
            }
        }
        
        /// <summary>
        /// The OggEncoder1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public IResourceContainer OggEncoder1
        {
            get
            {
                return this._oggEncoder1;
            }
            set
            {
                if ((this._oggEncoder1 != value))
                {
                    IResourceContainer old = this._oggEncoder1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOggEncoder1Changing(e);
                    this.OnPropertyChanging("OggEncoder1", e, _oggEncoder1Reference);
                    this._oggEncoder1 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOggEncoder1;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOggEncoder1;
                    }
                    this.OnOggEncoder1Changed(e);
                    this.OnPropertyChanged("OggEncoder1", e, _oggEncoder1Reference);
                }
            }
        }
        
        /// <summary>
        /// The DBAdapter1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public IResourceContainer DBAdapter1
        {
            get
            {
                return this._dBAdapter1;
            }
            set
            {
                if ((this._dBAdapter1 != value))
                {
                    IResourceContainer old = this._dBAdapter1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDBAdapter1Changing(e);
                    this.OnPropertyChanging("DBAdapter1", e, _dBAdapter1Reference);
                    this._dBAdapter1 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDBAdapter1;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDBAdapter1;
                    }
                    this.OnDBAdapter1Changed(e);
                    this.OnPropertyChanged("DBAdapter1", e, _dBAdapter1Reference);
                }
            }
        }
        
        /// <summary>
        /// The MySqlClient1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public IResourceContainer MySqlClient1
        {
            get
            {
                return this._mySqlClient1;
            }
            set
            {
                if ((this._mySqlClient1 != value))
                {
                    IResourceContainer old = this._mySqlClient1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMySqlClient1Changing(e);
                    this.OnPropertyChanging("MySqlClient1", e, _mySqlClient1Reference);
                    this._mySqlClient1 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMySqlClient1;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMySqlClient1;
                    }
                    this.OnMySqlClient1Changed(e);
                    this.OnPropertyChanged("MySqlClient1", e, _mySqlClient1Reference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MediaStoreX1ReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the SystemArchitecture model for this type
        /// </summary>
        public new static ISystemArchitecture SystemArchitectureInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/mediaStore/AssemblyX1#//MediaStoreX1")));
                }
                return ((ISystemArchitecture)(_classInstance));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/mediaStore/AssemblyX1#//MediaStoreX1")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the WebForm1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WebForm1Changing;
        
        /// <summary>
        /// Gets fired when the WebForm1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WebForm1Changed;
        
        /// <summary>
        /// Gets fired before the AudioStore1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AudioStore1Changing;
        
        /// <summary>
        /// Gets fired when the AudioStore1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AudioStore1Changed;
        
        /// <summary>
        /// Gets fired before the UserManagement1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UserManagement1Changing;
        
        /// <summary>
        /// Gets fired when the UserManagement1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UserManagement1Changed;
        
        /// <summary>
        /// Gets fired before the EncodingAdapter1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EncodingAdapter1Changing;
        
        /// <summary>
        /// Gets fired when the EncodingAdapter1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EncodingAdapter1Changed;
        
        /// <summary>
        /// Gets fired before the OggEncoder1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OggEncoder1Changing;
        
        /// <summary>
        /// Gets fired when the OggEncoder1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OggEncoder1Changed;
        
        /// <summary>
        /// Gets fired before the DBAdapter1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DBAdapter1Changing;
        
        /// <summary>
        /// Gets fired when the DBAdapter1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DBAdapter1Changed;
        
        /// <summary>
        /// Gets fired before the MySqlClient1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MySqlClient1Changing;
        
        /// <summary>
        /// Gets fired when the MySqlClient1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MySqlClient1Changed;
        
        private static NMF.Models.Meta.ITypedElement RetrieveWebForm1Reference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(MediaStoreX1.ClassInstance)).Resolve("WebForm1")));
        }
        
        /// <summary>
        /// Raises the WebForm1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWebForm1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WebForm1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WebForm1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWebForm1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WebForm1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the WebForm1 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWebForm1(object sender, System.EventArgs eventArgs)
        {
            this.WebForm1 = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveAudioStore1Reference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(MediaStoreX1.ClassInstance)).Resolve("AudioStore1")));
        }
        
        /// <summary>
        /// Raises the AudioStore1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAudioStore1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AudioStore1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AudioStore1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAudioStore1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AudioStore1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AudioStore1 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAudioStore1(object sender, System.EventArgs eventArgs)
        {
            this.AudioStore1 = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveUserManagement1Reference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(MediaStoreX1.ClassInstance)).Resolve("UserManagement1")));
        }
        
        /// <summary>
        /// Raises the UserManagement1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUserManagement1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UserManagement1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UserManagement1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUserManagement1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UserManagement1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the UserManagement1 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUserManagement1(object sender, System.EventArgs eventArgs)
        {
            this.UserManagement1 = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveEncodingAdapter1Reference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(MediaStoreX1.ClassInstance)).Resolve("EncodingAdapter1")));
        }
        
        /// <summary>
        /// Raises the EncodingAdapter1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEncodingAdapter1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EncodingAdapter1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EncodingAdapter1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEncodingAdapter1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EncodingAdapter1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EncodingAdapter1 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEncodingAdapter1(object sender, System.EventArgs eventArgs)
        {
            this.EncodingAdapter1 = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOggEncoder1Reference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(MediaStoreX1.ClassInstance)).Resolve("OggEncoder1")));
        }
        
        /// <summary>
        /// Raises the OggEncoder1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOggEncoder1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OggEncoder1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OggEncoder1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOggEncoder1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OggEncoder1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OggEncoder1 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOggEncoder1(object sender, System.EventArgs eventArgs)
        {
            this.OggEncoder1 = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDBAdapter1Reference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(MediaStoreX1.ClassInstance)).Resolve("DBAdapter1")));
        }
        
        /// <summary>
        /// Raises the DBAdapter1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDBAdapter1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DBAdapter1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DBAdapter1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDBAdapter1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DBAdapter1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DBAdapter1 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDBAdapter1(object sender, System.EventArgs eventArgs)
        {
            this.DBAdapter1 = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveMySqlClient1Reference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(MediaStoreX1.ClassInstance)).Resolve("MySqlClient1")));
        }
        
        /// <summary>
        /// Raises the MySqlClient1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMySqlClient1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MySqlClient1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MySqlClient1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMySqlClient1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MySqlClient1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MySqlClient1 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMySqlClient1(object sender, System.EventArgs eventArgs)
        {
            this.MySqlClient1 = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override NMF.Models.IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "WEBFORM1"))
            {
                return this.WebForm1;
            }
            if ((reference == "AUDIOSTORE1"))
            {
                return this.AudioStore1;
            }
            if ((reference == "USERMANAGEMENT1"))
            {
                return this.UserManagement1;
            }
            if ((reference == "ENCODINGADAPTER1"))
            {
                return this.EncodingAdapter1;
            }
            if ((reference == "OGGENCODER1"))
            {
                return this.OggEncoder1;
            }
            if ((reference == "DBADAPTER1"))
            {
                return this.DBAdapter1;
            }
            if ((reference == "MYSQLCLIENT1"))
            {
                return this.MySqlClient1;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "WEBFORM1"))
            {
                this.WebForm1 = ((IResourceContainer)(value));
                return;
            }
            if ((feature == "AUDIOSTORE1"))
            {
                this.AudioStore1 = ((IResourceContainer)(value));
                return;
            }
            if ((feature == "USERMANAGEMENT1"))
            {
                this.UserManagement1 = ((IResourceContainer)(value));
                return;
            }
            if ((feature == "ENCODINGADAPTER1"))
            {
                this.EncodingAdapter1 = ((IResourceContainer)(value));
                return;
            }
            if ((feature == "OGGENCODER1"))
            {
                this.OggEncoder1 = ((IResourceContainer)(value));
                return;
            }
            if ((feature == "DBADAPTER1"))
            {
                this.DBAdapter1 = ((IResourceContainer)(value));
                return;
            }
            if ((feature == "MYSQLCLIENT1"))
            {
                this.MySqlClient1 = ((IResourceContainer)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "WEBFORM1"))
            {
                return new WebForm1Proxy(this);
            }
            if ((reference == "AUDIOSTORE1"))
            {
                return new AudioStore1Proxy(this);
            }
            if ((reference == "USERMANAGEMENT1"))
            {
                return new UserManagement1Proxy(this);
            }
            if ((reference == "ENCODINGADAPTER1"))
            {
                return new EncodingAdapter1Proxy(this);
            }
            if ((reference == "OGGENCODER1"))
            {
                return new OggEncoder1Proxy(this);
            }
            if ((reference == "DBADAPTER1"))
            {
                return new DBAdapter1Proxy(this);
            }
            if ((reference == "MYSQLCLIENT1"))
            {
                return new MySqlClient1Proxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the SystemArchitecture for this model element
        /// </summary>
        public override ISystemArchitecture GetSystemArchitecture()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/mediaStore/AssemblyX1#//MediaStoreX1")));
            }
            return ((ISystemArchitecture)(_classInstance));
        }
        
        /// <summary>
        /// Gets the referenced value for a AssemblyContexts of the enclosing SystemArchitecture.
        /// </summary>
        public override IResourceContainer GetAssemblyContextsValue(IAssemblyContext reference)
        {
            return ((IResourceContainer)(this.GetReferencedElement(reference)));
        }
        
        /// <summary>
        /// Gets the referenced value for a AssemblyContexts of the enclosing SystemArchitecture.
        /// </summary>
        public override INotifyValue<IResourceContainer> GetAssemblyContextsProxy(IAssemblyContext reference)
        {
            if ((reference == null))
            {
                throw new System.ArgumentOutOfRangeException("reference");
            }
            if ((reference.UpperBound == 1))
            {
                return Observable.As<IModelElement, IResourceContainer>(this.GetExpressionForReference(reference.Name.ToUpperInvariant()));
            }
            throw new NotSupportedException();
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://github.com/georghinkel/mediaStore/AssemblyX1#//MediaStoreX1")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MediaStoreX1 class
        /// </summary>
        public class MediaStoreX1ReferencedElementsCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private MediaStoreX1 _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MediaStoreX1ReferencedElementsCollection(MediaStoreX1 parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.WebForm1 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AudioStore1 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.UserManagement1 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EncodingAdapter1 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OggEncoder1 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DBAdapter1 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MySqlClient1 != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.WebForm1Changed += this.PropagateValueChanges;
                this._parent.AudioStore1Changed += this.PropagateValueChanges;
                this._parent.UserManagement1Changed += this.PropagateValueChanges;
                this._parent.EncodingAdapter1Changed += this.PropagateValueChanges;
                this._parent.OggEncoder1Changed += this.PropagateValueChanges;
                this._parent.DBAdapter1Changed += this.PropagateValueChanges;
                this._parent.MySqlClient1Changed += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.WebForm1Changed -= this.PropagateValueChanges;
                this._parent.AudioStore1Changed -= this.PropagateValueChanges;
                this._parent.UserManagement1Changed -= this.PropagateValueChanges;
                this._parent.EncodingAdapter1Changed -= this.PropagateValueChanges;
                this._parent.OggEncoder1Changed -= this.PropagateValueChanges;
                this._parent.DBAdapter1Changed -= this.PropagateValueChanges;
                this._parent.MySqlClient1Changed -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                if ((this._parent.WebForm1 == null))
                {
                    IResourceContainer webForm1Casted = item.As<IResourceContainer>();
                    if ((webForm1Casted != null))
                    {
                        this._parent.WebForm1 = webForm1Casted;
                        return;
                    }
                }
                if ((this._parent.AudioStore1 == null))
                {
                    IResourceContainer audioStore1Casted = item.As<IResourceContainer>();
                    if ((audioStore1Casted != null))
                    {
                        this._parent.AudioStore1 = audioStore1Casted;
                        return;
                    }
                }
                if ((this._parent.UserManagement1 == null))
                {
                    IResourceContainer userManagement1Casted = item.As<IResourceContainer>();
                    if ((userManagement1Casted != null))
                    {
                        this._parent.UserManagement1 = userManagement1Casted;
                        return;
                    }
                }
                if ((this._parent.EncodingAdapter1 == null))
                {
                    IResourceContainer encodingAdapter1Casted = item.As<IResourceContainer>();
                    if ((encodingAdapter1Casted != null))
                    {
                        this._parent.EncodingAdapter1 = encodingAdapter1Casted;
                        return;
                    }
                }
                if ((this._parent.OggEncoder1 == null))
                {
                    IResourceContainer oggEncoder1Casted = item.As<IResourceContainer>();
                    if ((oggEncoder1Casted != null))
                    {
                        this._parent.OggEncoder1 = oggEncoder1Casted;
                        return;
                    }
                }
                if ((this._parent.DBAdapter1 == null))
                {
                    IResourceContainer dBAdapter1Casted = item.As<IResourceContainer>();
                    if ((dBAdapter1Casted != null))
                    {
                        this._parent.DBAdapter1 = dBAdapter1Casted;
                        return;
                    }
                }
                if ((this._parent.MySqlClient1 == null))
                {
                    IResourceContainer mySqlClient1Casted = item.As<IResourceContainer>();
                    if ((mySqlClient1Casted != null))
                    {
                        this._parent.MySqlClient1 = mySqlClient1Casted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.WebForm1 = null;
                this._parent.AudioStore1 = null;
                this._parent.UserManagement1 = null;
                this._parent.EncodingAdapter1 = null;
                this._parent.OggEncoder1 = null;
                this._parent.DBAdapter1 = null;
                this._parent.MySqlClient1 = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if ((item == this._parent.WebForm1))
                {
                    return true;
                }
                if ((item == this._parent.AudioStore1))
                {
                    return true;
                }
                if ((item == this._parent.UserManagement1))
                {
                    return true;
                }
                if ((item == this._parent.EncodingAdapter1))
                {
                    return true;
                }
                if ((item == this._parent.OggEncoder1))
                {
                    return true;
                }
                if ((item == this._parent.DBAdapter1))
                {
                    return true;
                }
                if ((item == this._parent.MySqlClient1))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.WebForm1 != null))
                {
                    array[arrayIndex] = this._parent.WebForm1;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AudioStore1 != null))
                {
                    array[arrayIndex] = this._parent.AudioStore1;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.UserManagement1 != null))
                {
                    array[arrayIndex] = this._parent.UserManagement1;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EncodingAdapter1 != null))
                {
                    array[arrayIndex] = this._parent.EncodingAdapter1;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OggEncoder1 != null))
                {
                    array[arrayIndex] = this._parent.OggEncoder1;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DBAdapter1 != null))
                {
                    array[arrayIndex] = this._parent.DBAdapter1;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MySqlClient1 != null))
                {
                    array[arrayIndex] = this._parent.MySqlClient1;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                if ((this._parent.WebForm1 == item))
                {
                    this._parent.WebForm1 = null;
                    return true;
                }
                if ((this._parent.AudioStore1 == item))
                {
                    this._parent.AudioStore1 = null;
                    return true;
                }
                if ((this._parent.UserManagement1 == item))
                {
                    this._parent.UserManagement1 = null;
                    return true;
                }
                if ((this._parent.EncodingAdapter1 == item))
                {
                    this._parent.EncodingAdapter1 = null;
                    return true;
                }
                if ((this._parent.OggEncoder1 == item))
                {
                    this._parent.OggEncoder1 = null;
                    return true;
                }
                if ((this._parent.DBAdapter1 == item))
                {
                    this._parent.DBAdapter1 = null;
                    return true;
                }
                if ((this._parent.MySqlClient1 == item))
                {
                    this._parent.MySqlClient1 = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.WebForm1).Concat(this._parent.AudioStore1).Concat(this._parent.UserManagement1).Concat(this._parent.EncodingAdapter1).Concat(this._parent.OggEncoder1).Concat(this._parent.DBAdapter1).Concat(this._parent.MySqlClient1).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the WebForm1 property
        /// </summary>
        private sealed class WebForm1Proxy : ModelPropertyChange<IMediaStoreX1, IResourceContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WebForm1Proxy(IMediaStoreX1 modelElement) : 
                    base(modelElement, "WebForm1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceContainer Value
            {
                get
                {
                    return this.ModelElement.WebForm1;
                }
                set
                {
                    this.ModelElement.WebForm1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AudioStore1 property
        /// </summary>
        private sealed class AudioStore1Proxy : ModelPropertyChange<IMediaStoreX1, IResourceContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AudioStore1Proxy(IMediaStoreX1 modelElement) : 
                    base(modelElement, "AudioStore1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceContainer Value
            {
                get
                {
                    return this.ModelElement.AudioStore1;
                }
                set
                {
                    this.ModelElement.AudioStore1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the UserManagement1 property
        /// </summary>
        private sealed class UserManagement1Proxy : ModelPropertyChange<IMediaStoreX1, IResourceContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UserManagement1Proxy(IMediaStoreX1 modelElement) : 
                    base(modelElement, "UserManagement1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceContainer Value
            {
                get
                {
                    return this.ModelElement.UserManagement1;
                }
                set
                {
                    this.ModelElement.UserManagement1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EncodingAdapter1 property
        /// </summary>
        private sealed class EncodingAdapter1Proxy : ModelPropertyChange<IMediaStoreX1, IResourceContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EncodingAdapter1Proxy(IMediaStoreX1 modelElement) : 
                    base(modelElement, "EncodingAdapter1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceContainer Value
            {
                get
                {
                    return this.ModelElement.EncodingAdapter1;
                }
                set
                {
                    this.ModelElement.EncodingAdapter1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OggEncoder1 property
        /// </summary>
        private sealed class OggEncoder1Proxy : ModelPropertyChange<IMediaStoreX1, IResourceContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OggEncoder1Proxy(IMediaStoreX1 modelElement) : 
                    base(modelElement, "OggEncoder1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceContainer Value
            {
                get
                {
                    return this.ModelElement.OggEncoder1;
                }
                set
                {
                    this.ModelElement.OggEncoder1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DBAdapter1 property
        /// </summary>
        private sealed class DBAdapter1Proxy : ModelPropertyChange<IMediaStoreX1, IResourceContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DBAdapter1Proxy(IMediaStoreX1 modelElement) : 
                    base(modelElement, "DBAdapter1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceContainer Value
            {
                get
                {
                    return this.ModelElement.DBAdapter1;
                }
                set
                {
                    this.ModelElement.DBAdapter1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MySqlClient1 property
        /// </summary>
        private sealed class MySqlClient1Proxy : ModelPropertyChange<IMediaStoreX1, IResourceContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MySqlClient1Proxy(IMediaStoreX1 modelElement) : 
                    base(modelElement, "MySqlClient1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceContainer Value
            {
                get
                {
                    return this.ModelElement.MySqlClient1;
                }
                set
                {
                    this.ModelElement.MySqlClient1 = value;
                }
            }
        }
    }
}

